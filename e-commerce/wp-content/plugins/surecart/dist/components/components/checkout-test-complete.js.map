{"file":"checkout-test-complete.js","mappings":";;;;;;;;;;;;;AAAA,MAAM,uBAAuB,GAAG,6VAA6V,CAAC;AAC9X,qCAAe,uBAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0tBC+EjB,UAAE,iOAIR,UAAE,4gCASF,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["src/components/controllers/checkout-form/checkout-test-complete/checkout-test-complete.scss?tag=sc-checkout-test-complete&encapsulation=shadow","src/components/controllers/checkout-form/checkout-test-complete/checkout-test-complete.tsx"],"sourcesContent":[".confirm {\n  &__icon {\n    margin-bottom: var(--sc-spacing-medium);\n    display: flex;\n    justify-content: center;\n  }\n\n  &__icon-container {\n    background: var(--sc-color-primary-500);\n    width: 55px;\n    height: 55px;\n    border-radius: 999999px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 26px;\n    line-height: 1;\n    color: white;\n  }\n}\n\nsc-dialog::part(overlay) {\n  backdrop-filter: blur(4px);\n}\n","import { Component, Element, Event, EventEmitter, h, Host, Watch, Prop, State } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { state as processorsState } from '@store/processors';\nimport { state as selectedProcessorState } from '@store/selected-processor';\nimport { Checkout, ManualPaymentMethod } from '../../../../types';\nimport { clearCheckout } from '@store/checkout/mutations';\n/**\n * This component listens to the order status\n * and confirms the order when payment is successful.\n */\n@Component({\n  tag: 'sc-checkout-test-complete',\n  styleUrl: 'checkout-test-complete.scss',\n  shadow: true,\n})\nexport class ScCheckoutTestComplete {\n  private continueButton: HTMLScButtonElement;\n  /** The order confirm provider element */\n  @Element() el: HTMLScCheckoutTestCompleteElement;\n\n  /** Whether to show success modal */\n  @State() showSuccessModal: boolean = false;\n\n  /** Whether to show success modal */\n  @State() manualPaymentMethod: ManualPaymentMethod;\n\n  /** Checkout status to listen and do payment related stuff. */\n  @Prop() checkoutStatus: string;\n\n  /** Success url. */\n  @Prop() successUrl: string;\n\n  /** The order is paid event. */\n  @Event() scOrderPaid: EventEmitter<Checkout>;\n\n  @Event() scSetState: EventEmitter<string>;\n\n  /**\n   * Watch for paid checkout machine state.\n   * This is triggered by Stripe, Paypal or Paystack when payment succeeds.\n   */\n  @Watch('checkoutStatus')\n  handleConfirmOrderEvent() {\n    if (this.checkoutStatus === 'test_mode_restricted') {\n      this.confirmOrder();\n    }\n  }\n\n  /** Confirm the order. */\n  async confirmOrder() {\n    this.manualPaymentMethod = (processorsState.manualPaymentMethods || [])?.find(p => p.id === selectedProcessorState.id);\n    this.showSuccessModal = true;\n    clearCheckout();\n  }\n\n  @Watch('showSuccessModal')\n  handleSuccessModal() {\n    if (this.showSuccessModal) {\n      setTimeout(() => {\n        this.continueButton?.focus();\n      }, 50);\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot />\n        <sc-dialog\n          open={!!this.showSuccessModal}\n          style={{ '--body-spacing': 'var(--sc-spacing-xxx-large)', '--width': '400px' }}\n          noHeader\n          onScRequestClose={e => e.preventDefault()}\n        >\n          <div class=\"confirm__icon\">\n            <div class=\"confirm__icon-container\">\n              <sc-icon name=\"check\" />\n            </div>\n          </div>\n          <sc-dashboard-module\n            heading={__('Test checkout successful!', 'surecart')}\n            style={{ '--sc-dashboard-module-spacing': 'var(--sc-spacing-x-large)', 'textAlign': 'center' }}\n          >\n            <span slot=\"description\">\n              {__('This is a simulated test checkout, and no orders were processed. To perform a test order, please contact your store administrator. ', 'surecart')}\n            </span>\n            {!!this.manualPaymentMethod?.name && !!this.manualPaymentMethod?.instructions && (\n              <sc-alert type=\"info\" open style={{ 'text-align': 'left' }}>\n                <span slot=\"title\">{this.manualPaymentMethod?.name}</span>\n                <div innerHTML={this.manualPaymentMethod?.instructions}></div>\n              </sc-alert>\n            )}\n            <sc-button href={window?.scData?.home_url} size=\"large\" type=\"primary\" ref={el => (this.continueButton = el as HTMLScButtonElement)}>\n              {__('Go to Homepage', 'surecart')}\n              <sc-icon name=\"arrow-right\" slot=\"suffix\" />\n            </sc-button>\n          </sc-dashboard-module>\n        </sc-dialog>\n      </Host>\n    );\n  }\n}\n"],"version":3}