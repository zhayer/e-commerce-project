{"file":"sc-order-tax-id-input2.js","mappings":"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","names":["checkoutState"],"sources":["src/components/controllers/checkout-form/order-tax-id-input/sc-order-tax-id-input.css?tag=sc-order-tax-id-input&encapsulation=shadow","src/components/controllers/checkout-form/order-tax-id-input/sc-order-tax-id-input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { state as checkoutState } from '@store/checkout';\nimport { __ } from '@wordpress/i18n';\nimport { createOrUpdateCheckout } from '../../../../services/session';\n\nimport { Address, Checkout, TaxIdentifier } from '../../../../types';\nimport { formBusy } from '@store/form/getters';\nimport { createErrorNotice } from '@store/notices/mutations';\nimport { updateFormState } from '@store/form/mutations';\n\n@Component({\n  tag: 'sc-order-tax-id-input',\n  styleUrl: 'sc-order-tax-id-input.css',\n  shadow: true,\n})\nexport class ScOrderTaxIdInput {\n  /** The tax id input */\n  private input: HTMLScTaxIdInputElement;\n\n  /** Force show the field. */\n  @Prop() show: boolean = false;\n\n  /** Other zones label */\n  @Prop() otherLabel: string;\n\n  /** GST zone label */\n  @Prop() caGstLabel: string;\n\n  /** AU zone label */\n  @Prop() auAbnLabel: string;\n\n  /** UK zone label */\n  @Prop() gbVatLabel: string;\n\n  /** EU zone label */\n  @Prop() euVatLabel: string;\n\n  /** Help text */\n  @Prop() helpText: string;\n\n  /** Tax ID Types which will be shown Eg: '[\"eu_vat\", \"gb_vat\"]' */\n  @Prop() taxIdTypes: string | string[];\n\n  /** Tax ID Types data as array */\n  @State() taxIdTypesData: string[] = [];\n\n  @Watch('taxIdTypes')\n  handleTaxIdTypesChange() {\n    this.taxIdTypesData = typeof this.taxIdTypes === 'string' ? JSON.parse(this.taxIdTypes) : this.taxIdTypes;\n  }\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  getStatus() {\n    if (checkoutState.checkout?.tax_identifier?.number_type !== 'eu_vat') {\n      return 'unknown';\n    }\n    if (checkoutState.taxProtocol?.eu_vat_unverified_behavior === 'apply_reverse_charge') {\n      return 'unknown';\n    }\n    return (checkoutState.checkout?.tax_identifier as TaxIdentifier)?.eu_vat_verified ? 'valid' : 'invalid';\n  }\n\n  async updateOrder(tax_identifier: { number: string; number_type: string }) {\n    try {\n      updateFormState('FETCH');\n      checkoutState.checkout = (await createOrUpdateCheckout({\n        id: checkoutState.checkout.id,\n        data: { tax_identifier },\n      })) as Checkout;\n      updateFormState('RESOLVE');\n    } catch (e) {\n      console.error(e);\n      createErrorNotice(e);\n      updateFormState('REJECT');\n    }\n  }\n\n  componentWillLoad() {\n    this.handleTaxIdTypesChange();\n  }\n\n  required() {\n    return checkoutState.taxProtocol?.eu_vat_required && checkoutState.checkout?.tax_identifier?.number_type === 'eu_vat';\n  }\n\n  render() {\n    return (\n      <sc-tax-id-input\n        ref={el => (this.input = el as HTMLScTaxIdInputElement)}\n        show={this.show}\n        number={checkoutState.checkout?.tax_identifier?.number}\n        type={checkoutState.checkout?.tax_identifier?.number_type || this.taxIdTypesData?.[0] || 'eu_vat'}\n        country={(checkoutState.checkout?.shipping_address as Address)?.country}\n        status={this.getStatus()}\n        loading={formBusy()}\n        onScChange={e => {\n          e.stopImmediatePropagation();\n          this.updateOrder(e.detail);\n        }}\n        otherLabel={this.otherLabel}\n        caGstLabel={this.caGstLabel}\n        auAbnLabel={this.auAbnLabel}\n        gbVatLabel={this.gbVatLabel}\n        euVatLabel={this.euVatLabel}\n        help={this.helpText}\n        taxIdTypes={this.taxIdTypesData}\n        required={this.required()}\n      ></sc-tax-id-input>\n    );\n  }\n}\n"],"version":3}