{"file":"fetch.js","mappings":"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,OAAO,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE;AAC/E,IAAI,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE;AAC5C,MAAM,OAAO,EAAE,MAAM;AACrB,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,EAAE;AACjF,IAAI,OAAO,CAAC,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;AAC9C,MAAM,OAAO,EAAE,MAAM;AACrB,KAAK,CAAC,CAAC;AACP,GAAG;AACH,EAAE,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC;;ACpBD;AACA;AACA;AACqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,UAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAE;AACjB;AACA;AACA;AACA;;ACzEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,UAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1EA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,4BAA4B,GAAG,SAAS,IAAI,CAAC,OAAO,EAAE,IAAI,KAAK;AACrE,EAAE,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,EAAE;AACvC,IAAI,MAAM,cAAc,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;AACxE,IAAI,IAAI,cAAc,KAAK,SAAS,EAAE;AACtC,MAAM,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE;AAC9C,QAAQ,gBAAgB,EAAE,SAAS;AACnC,OAAO,CAAC,CAAC;AACT,KAAK,MAAM,IAAI,cAAc,KAAK,EAAE,EAAE;AACtC,MAAM,OAAO,CAAC,GAAG,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,EAAE,kBAAkB,CAAC,CAAC;AACrE,KAAK;AACL,GAAG;AACH,EAAE,IAAI,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;AACxC,IAAI,MAAM,cAAc,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;AACzE,IAAI,IAAI,cAAc,KAAK,SAAS,EAAE;AACtC,MAAM,OAAO,CAAC,IAAI,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE;AAChD,QAAQ,gBAAgB,EAAE,SAAS;AACnC,OAAO,CAAC,CAAC;AACT,KAAK,MAAM,IAAI,cAAc,KAAK,EAAE,EAAE;AACtC,MAAM,OAAO,CAAC,IAAI,GAAG,eAAe,CAAC,OAAO,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;AACvE,KAAK;AACL,GAAG;AACH,EAAE,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;AACvB,CAAC;;ACrCD;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,UAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC3KA;AAEA;AAEA;;;;;AAKA;AAEA;;;AAGA;AAEA;AACA;;;AAGA;AAEA;;;;+BAIyB,UAAE;;;;;6BAKR,eAAO;;oBAEd,UAAE,2LACyE,UAAE;;;;;;;AASzF;AAIA;;;;;;;;;;iBAUa,UAAE;;;;;;;;;;;AAcf;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;","names":["parseResponse"],"sources":["../../node_modules/@wordpress/url/build-module/has-query-arg.js","../../node_modules/@wordpress/url/build-module/normalize-path.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/nonce.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/namespace-endpoint.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/root-url.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/preloading.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/fetch-all-middleware.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/http-v1.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/user-locale.js","../../node_modules/@wordpress/api-fetch/build-module/utils/response.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/media-upload.js","../../node_modules/@wordpress/api-fetch/build-module/middlewares/theme-preview.js","../../node_modules/@wordpress/api-fetch/build-module/index.js","src/functions/fetch.ts"],"sourcesContent":["/**\n * Internal dependencies\n */\nimport { getQueryArg } from './get-query-arg';\n\n/**\n * Determines whether the URL contains a given query arg.\n *\n * @param {string} url URL.\n * @param {string} arg Query arg name.\n *\n * @example\n * ```js\n * const hasBar = hasQueryArg( 'https://wordpress.org?foo=bar&bar=baz', 'bar' ); // true\n * ```\n *\n * @return {boolean} Whether or not the URL contains the query arg.\n */\nexport function hasQueryArg(url, arg) {\n  return getQueryArg(url, arg) !== undefined;\n}\n//# sourceMappingURL=has-query-arg.js.map","/**\n * Given a path, returns a normalized path where equal query parameter values\n * will be treated as identical, regardless of order they appear in the original\n * text.\n *\n * @param {string} path Original path.\n *\n * @return {string} Normalized path.\n */\nexport function normalizePath(path) {\n  const splitted = path.split('?');\n  const query = splitted[1];\n  const base = splitted[0];\n  if (!query) {\n    return base;\n  }\n\n  // 'b=1%2C2&c=2&a=5'\n  return base + '?' + query\n  // [ 'b=1%2C2', 'c=2', 'a=5' ]\n  .split('&')\n  // [ [ 'b, '1%2C2' ], [ 'c', '2' ], [ 'a', '5' ] ]\n  .map(entry => entry.split('='))\n  // [ [ 'b', '1,2' ], [ 'c', '2' ], [ 'a', '5' ] ]\n  .map(pair => pair.map(decodeURIComponent))\n  // [ [ 'a', '5' ], [ 'b, '1,2' ], [ 'c', '2' ] ]\n  .sort((a, b) => a[0].localeCompare(b[0]))\n  // [ [ 'a', '5' ], [ 'b, '1%2C2' ], [ 'c', '2' ] ]\n  .map(pair => pair.map(encodeURIComponent))\n  // [ 'a=5', 'b=1%2C2', 'c=2' ]\n  .map(pair => pair.join('='))\n  // 'a=5&b=1%2C2&c=2'\n  .join('&');\n}\n//# sourceMappingURL=normalize-path.js.map","/**\n * @param {string} nonce\n * @return {import('../types').APIFetchMiddleware & { nonce: string }} A middleware to enhance a request with a nonce.\n */\nfunction createNonceMiddleware(nonce) {\n  /**\n   * @type {import('../types').APIFetchMiddleware & { nonce: string }}\n   */\n  const middleware = (options, next) => {\n    const {\n      headers = {}\n    } = options;\n\n    // If an 'X-WP-Nonce' header (or any case-insensitive variation\n    // thereof) was specified, no need to add a nonce header.\n    for (const headerName in headers) {\n      if (headerName.toLowerCase() === 'x-wp-nonce' && headers[headerName] === middleware.nonce) {\n        return next(options);\n      }\n    }\n    return next({\n      ...options,\n      headers: {\n        ...headers,\n        'X-WP-Nonce': middleware.nonce\n      }\n    });\n  };\n  middleware.nonce = nonce;\n  return middleware;\n}\nexport default createNonceMiddleware;\n//# sourceMappingURL=nonce.js.map","/**\n * @type {import('../types').APIFetchMiddleware}\n */\nconst namespaceAndEndpointMiddleware = (options, next) => {\n  let path = options.path;\n  let namespaceTrimmed, endpointTrimmed;\n  if (typeof options.namespace === 'string' && typeof options.endpoint === 'string') {\n    namespaceTrimmed = options.namespace.replace(/^\\/|\\/$/g, '');\n    endpointTrimmed = options.endpoint.replace(/^\\//, '');\n    if (endpointTrimmed) {\n      path = namespaceTrimmed + '/' + endpointTrimmed;\n    } else {\n      path = namespaceTrimmed;\n    }\n  }\n  delete options.namespace;\n  delete options.endpoint;\n  return next({\n    ...options,\n    path\n  });\n};\nexport default namespaceAndEndpointMiddleware;\n//# sourceMappingURL=namespace-endpoint.js.map","/**\n * Internal dependencies\n */\nimport namespaceAndEndpointMiddleware from './namespace-endpoint';\n\n/**\n * @param {string} rootURL\n * @return {import('../types').APIFetchMiddleware} Root URL middleware.\n */\nconst createRootURLMiddleware = rootURL => (options, next) => {\n  return namespaceAndEndpointMiddleware(options, optionsWithPath => {\n    let url = optionsWithPath.url;\n    let path = optionsWithPath.path;\n    let apiRoot;\n    if (typeof path === 'string') {\n      apiRoot = rootURL;\n      if (-1 !== rootURL.indexOf('?')) {\n        path = path.replace('?', '&');\n      }\n      path = path.replace(/^\\//, '');\n\n      // API root may already include query parameter prefix if site is\n      // configured to use plain permalinks.\n      if ('string' === typeof apiRoot && -1 !== apiRoot.indexOf('?')) {\n        path = path.replace('?', '&');\n      }\n      url = apiRoot + path;\n    }\n    return next({\n      ...optionsWithPath,\n      url\n    });\n  });\n};\nexport default createRootURLMiddleware;\n//# sourceMappingURL=root-url.js.map","/**\n * WordPress dependencies\n */\nimport { addQueryArgs, getQueryArgs, normalizePath } from '@wordpress/url';\n\n/**\n * @param {Record<string, any>} preloadedData\n * @return {import('../types').APIFetchMiddleware} Preloading middleware.\n */\nfunction createPreloadingMiddleware(preloadedData) {\n  const cache = Object.fromEntries(Object.entries(preloadedData).map(([path, data]) => [normalizePath(path), data]));\n  return (options, next) => {\n    const {\n      parse = true\n    } = options;\n    /** @type {string | void} */\n    let rawPath = options.path;\n    if (!rawPath && options.url) {\n      const {\n        rest_route: pathFromQuery,\n        ...queryArgs\n      } = getQueryArgs(options.url);\n      if (typeof pathFromQuery === 'string') {\n        rawPath = addQueryArgs(pathFromQuery, queryArgs);\n      }\n    }\n    if (typeof rawPath !== 'string') {\n      return next(options);\n    }\n    const method = options.method || 'GET';\n    const path = normalizePath(rawPath);\n    if ('GET' === method && cache[path]) {\n      const cacheData = cache[path];\n\n      // Unsetting the cache key ensures that the data is only used a single time.\n      delete cache[path];\n      return prepareResponse(cacheData, !!parse);\n    } else if ('OPTIONS' === method && cache[method] && cache[method][path]) {\n      const cacheData = cache[method][path];\n\n      // Unsetting the cache key ensures that the data is only used a single time.\n      delete cache[method][path];\n      return prepareResponse(cacheData, !!parse);\n    }\n    return next(options);\n  };\n}\n\n/**\n * This is a helper function that sends a success response.\n *\n * @param {Record<string, any>} responseData\n * @param {boolean}             parse\n * @return {Promise<any>} Promise with the response.\n */\nfunction prepareResponse(responseData, parse) {\n  return Promise.resolve(parse ? responseData.body : new window.Response(JSON.stringify(responseData.body), {\n    status: 200,\n    statusText: 'OK',\n    headers: responseData.headers\n  }));\n}\nexport default createPreloadingMiddleware;\n//# sourceMappingURL=preloading.js.map","/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport apiFetch from '..';\n\n/**\n * Apply query arguments to both URL and Path, whichever is present.\n *\n * @param {import('../types').APIFetchOptions} props\n * @param {Record<string, string | number>}    queryArgs\n * @return {import('../types').APIFetchOptions} The request with the modified query args\n */\nconst modifyQuery = ({\n  path,\n  url,\n  ...options\n}, queryArgs) => ({\n  ...options,\n  url: url && addQueryArgs(url, queryArgs),\n  path: path && addQueryArgs(path, queryArgs)\n});\n\n/**\n * Duplicates parsing functionality from apiFetch.\n *\n * @param {Response} response\n * @return {Promise<any>} Parsed response json.\n */\nconst parseResponse = response => response.json ? response.json() : Promise.reject(response);\n\n/**\n * @param {string | null} linkHeader\n * @return {{ next?: string }} The parsed link header.\n */\nconst parseLinkHeader = linkHeader => {\n  if (!linkHeader) {\n    return {};\n  }\n  const match = linkHeader.match(/<([^>]+)>; rel=\"next\"/);\n  return match ? {\n    next: match[1]\n  } : {};\n};\n\n/**\n * @param {Response} response\n * @return {string | undefined} The next page URL.\n */\nconst getNextPageUrl = response => {\n  const {\n    next\n  } = parseLinkHeader(response.headers.get('link'));\n  return next;\n};\n\n/**\n * @param {import('../types').APIFetchOptions} options\n * @return {boolean} True if the request contains an unbounded query.\n */\nconst requestContainsUnboundedQuery = options => {\n  const pathIsUnbounded = !!options.path && options.path.indexOf('per_page=-1') !== -1;\n  const urlIsUnbounded = !!options.url && options.url.indexOf('per_page=-1') !== -1;\n  return pathIsUnbounded || urlIsUnbounded;\n};\n\n/**\n * The REST API enforces an upper limit on the per_page option. To handle large\n * collections, apiFetch consumers can pass `per_page=-1`; this middleware will\n * then recursively assemble a full response array from all available pages.\n *\n * @type {import('../types').APIFetchMiddleware}\n */\nconst fetchAllMiddleware = async (options, next) => {\n  if (options.parse === false) {\n    // If a consumer has opted out of parsing, do not apply middleware.\n    return next(options);\n  }\n  if (!requestContainsUnboundedQuery(options)) {\n    // If neither url nor path is requesting all items, do not apply middleware.\n    return next(options);\n  }\n\n  // Retrieve requested page of results.\n  const response = await apiFetch({\n    ...modifyQuery(options, {\n      per_page: 100\n    }),\n    // Ensure headers are returned for page 1.\n    parse: false\n  });\n  const results = await parseResponse(response);\n  if (!Array.isArray(results)) {\n    // We have no reliable way of merging non-array results.\n    return results;\n  }\n  let nextPage = getNextPageUrl(response);\n  if (!nextPage) {\n    // There are no further pages to request.\n    return results;\n  }\n\n  // Iteratively fetch all remaining pages until no \"next\" header is found.\n  let mergedResults = /** @type {any[]} */[].concat(results);\n  while (nextPage) {\n    const nextResponse = await apiFetch({\n      ...options,\n      // Ensure the URL for the next page is used instead of any provided path.\n      path: undefined,\n      url: nextPage,\n      // Ensure we still get headers so we can identify the next page.\n      parse: false\n    });\n    const nextResults = await parseResponse(nextResponse);\n    mergedResults = mergedResults.concat(nextResults);\n    nextPage = getNextPageUrl(nextResponse);\n  }\n  return mergedResults;\n};\nexport default fetchAllMiddleware;\n//# sourceMappingURL=fetch-all-middleware.js.map","/**\n * Set of HTTP methods which are eligible to be overridden.\n *\n * @type {Set<string>}\n */\nconst OVERRIDE_METHODS = new Set(['PATCH', 'PUT', 'DELETE']);\n\n/**\n * Default request method.\n *\n * \"A request has an associated method (a method). Unless stated otherwise it\n * is `GET`.\"\n *\n * @see  https://fetch.spec.whatwg.org/#requests\n *\n * @type {string}\n */\nconst DEFAULT_METHOD = 'GET';\n\n/**\n * API Fetch middleware which overrides the request method for HTTP v1\n * compatibility leveraging the REST API X-HTTP-Method-Override header.\n *\n * @type {import('../types').APIFetchMiddleware}\n */\nconst httpV1Middleware = (options, next) => {\n  const {\n    method = DEFAULT_METHOD\n  } = options;\n  if (OVERRIDE_METHODS.has(method.toUpperCase())) {\n    options = {\n      ...options,\n      headers: {\n        ...options.headers,\n        'X-HTTP-Method-Override': method,\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    };\n  }\n  return next(options);\n};\nexport default httpV1Middleware;\n//# sourceMappingURL=http-v1.js.map","/**\n * WordPress dependencies\n */\nimport { addQueryArgs, hasQueryArg } from '@wordpress/url';\n\n/**\n * @type {import('../types').APIFetchMiddleware}\n */\nconst userLocaleMiddleware = (options, next) => {\n  if (typeof options.url === 'string' && !hasQueryArg(options.url, '_locale')) {\n    options.url = addQueryArgs(options.url, {\n      _locale: 'user'\n    });\n  }\n  if (typeof options.path === 'string' && !hasQueryArg(options.path, '_locale')) {\n    options.path = addQueryArgs(options.path, {\n      _locale: 'user'\n    });\n  }\n  return next(options);\n};\nexport default userLocaleMiddleware;\n//# sourceMappingURL=user-locale.js.map","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Parses the apiFetch response.\n *\n * @param {Response} response\n * @param {boolean}  shouldParseResponse\n *\n * @return {Promise<any> | null | Response} Parsed response.\n */\nconst parseResponse = (response, shouldParseResponse = true) => {\n  if (shouldParseResponse) {\n    if (response.status === 204) {\n      return null;\n    }\n    return response.json ? response.json() : Promise.reject(response);\n  }\n  return response;\n};\n\n/**\n * Calls the `json` function on the Response, throwing an error if the response\n * doesn't have a json function or if parsing the json itself fails.\n *\n * @param {Response} response\n * @return {Promise<any>} Parsed response.\n */\nconst parseJsonAndNormalizeError = response => {\n  const invalidJsonError = {\n    code: 'invalid_json',\n    message: __('The response is not a valid JSON response.')\n  };\n  if (!response || !response.json) {\n    throw invalidJsonError;\n  }\n  return response.json().catch(() => {\n    throw invalidJsonError;\n  });\n};\n\n/**\n * Parses the apiFetch response properly and normalize response errors.\n *\n * @param {Response} response\n * @param {boolean}  shouldParseResponse\n *\n * @return {Promise<any>} Parsed response.\n */\nexport const parseResponseAndNormalizeError = (response, shouldParseResponse = true) => {\n  return Promise.resolve(parseResponse(response, shouldParseResponse)).catch(res => parseAndThrowError(res, shouldParseResponse));\n};\n\n/**\n * Parses a response, throwing an error if parsing the response fails.\n *\n * @param {Response} response\n * @param {boolean}  shouldParseResponse\n * @return {Promise<any>} Parsed response.\n */\nexport function parseAndThrowError(response, shouldParseResponse = true) {\n  if (!shouldParseResponse) {\n    throw response;\n  }\n  return parseJsonAndNormalizeError(response).then(error => {\n    const unknownError = {\n      code: 'unknown_error',\n      message: __('An unknown error occurred.')\n    };\n    throw error || unknownError;\n  });\n}\n//# sourceMappingURL=response.js.map","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { parseAndThrowError, parseResponseAndNormalizeError } from '../utils/response';\n\n/**\n * @param {import('../types').APIFetchOptions} options\n * @return {boolean} True if the request is for media upload.\n */\nfunction isMediaUploadRequest(options) {\n  const isCreateMethod = !!options.method && options.method === 'POST';\n  const isMediaEndpoint = !!options.path && options.path.indexOf('/wp/v2/media') !== -1 || !!options.url && options.url.indexOf('/wp/v2/media') !== -1;\n  return isMediaEndpoint && isCreateMethod;\n}\n\n/**\n * Middleware handling media upload failures and retries.\n *\n * @type {import('../types').APIFetchMiddleware}\n */\nconst mediaUploadMiddleware = (options, next) => {\n  if (!isMediaUploadRequest(options)) {\n    return next(options);\n  }\n  let retries = 0;\n  const maxRetries = 5;\n\n  /**\n   * @param {string} attachmentId\n   * @return {Promise<any>} Processed post response.\n   */\n  const postProcess = attachmentId => {\n    retries++;\n    return next({\n      path: `/wp/v2/media/${attachmentId}/post-process`,\n      method: 'POST',\n      data: {\n        action: 'create-image-subsizes'\n      },\n      parse: false\n    }).catch(() => {\n      if (retries < maxRetries) {\n        return postProcess(attachmentId);\n      }\n      next({\n        path: `/wp/v2/media/${attachmentId}?force=true`,\n        method: 'DELETE'\n      });\n      return Promise.reject();\n    });\n  };\n  return next({\n    ...options,\n    parse: false\n  }).catch(response => {\n    const attachmentId = response.headers.get('x-wp-upload-attachment-id');\n    if (response.status >= 500 && response.status < 600 && attachmentId) {\n      return postProcess(attachmentId).catch(() => {\n        if (options.parse !== false) {\n          return Promise.reject({\n            code: 'post_process',\n            message: __('Media upload failed. If this is a photo or a large image, please scale it down and try again.')\n          });\n        }\n        return Promise.reject(response);\n      });\n    }\n    return parseAndThrowError(response, options.parse);\n  }).then(response => parseResponseAndNormalizeError(response, options.parse));\n};\nexport default mediaUploadMiddleware;\n//# sourceMappingURL=media-upload.js.map","/**\n * WordPress dependencies\n */\nimport { addQueryArgs, getQueryArg, removeQueryArgs } from '@wordpress/url';\n\n/**\n * This appends a `wp_theme_preview` parameter to the REST API request URL if\n * the admin URL contains a `theme` GET parameter.\n *\n * If the REST API request URL has contained the `wp_theme_preview` parameter as `''`,\n * then bypass this middleware.\n *\n * @param {Record<string, any>} themePath\n * @return {import('../types').APIFetchMiddleware} Preloading middleware.\n */\nconst createThemePreviewMiddleware = themePath => (options, next) => {\n  if (typeof options.url === 'string') {\n    const wpThemePreview = getQueryArg(options.url, 'wp_theme_preview');\n    if (wpThemePreview === undefined) {\n      options.url = addQueryArgs(options.url, {\n        wp_theme_preview: themePath\n      });\n    } else if (wpThemePreview === '') {\n      options.url = removeQueryArgs(options.url, 'wp_theme_preview');\n    }\n  }\n  if (typeof options.path === 'string') {\n    const wpThemePreview = getQueryArg(options.path, 'wp_theme_preview');\n    if (wpThemePreview === undefined) {\n      options.path = addQueryArgs(options.path, {\n        wp_theme_preview: themePath\n      });\n    } else if (wpThemePreview === '') {\n      options.path = removeQueryArgs(options.path, 'wp_theme_preview');\n    }\n  }\n  return next(options);\n};\nexport default createThemePreviewMiddleware;\n//# sourceMappingURL=theme-preview.js.map","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport createNonceMiddleware from './middlewares/nonce';\nimport createRootURLMiddleware from './middlewares/root-url';\nimport createPreloadingMiddleware from './middlewares/preloading';\nimport fetchAllMiddleware from './middlewares/fetch-all-middleware';\nimport namespaceEndpointMiddleware from './middlewares/namespace-endpoint';\nimport httpV1Middleware from './middlewares/http-v1';\nimport userLocaleMiddleware from './middlewares/user-locale';\nimport mediaUploadMiddleware from './middlewares/media-upload';\nimport createThemePreviewMiddleware from './middlewares/theme-preview';\nimport { parseResponseAndNormalizeError, parseAndThrowError } from './utils/response';\n\n/**\n * Default set of header values which should be sent with every request unless\n * explicitly provided through apiFetch options.\n *\n * @type {Record<string, string>}\n */\nconst DEFAULT_HEADERS = {\n  // The backend uses the Accept header as a condition for considering an\n  // incoming request as a REST request.\n  //\n  // See: https://core.trac.wordpress.org/ticket/44534\n  Accept: 'application/json, */*;q=0.1'\n};\n\n/**\n * Default set of fetch option values which should be sent with every request\n * unless explicitly provided through apiFetch options.\n *\n * @type {Object}\n */\nconst DEFAULT_OPTIONS = {\n  credentials: 'include'\n};\n\n/** @typedef {import('./types').APIFetchMiddleware} APIFetchMiddleware */\n/** @typedef {import('./types').APIFetchOptions} APIFetchOptions */\n\n/**\n * @type {import('./types').APIFetchMiddleware[]}\n */\nconst middlewares = [userLocaleMiddleware, namespaceEndpointMiddleware, httpV1Middleware, fetchAllMiddleware];\n\n/**\n * Register a middleware\n *\n * @param {import('./types').APIFetchMiddleware} middleware\n */\nfunction registerMiddleware(middleware) {\n  middlewares.unshift(middleware);\n}\n\n/**\n * Checks the status of a response, throwing the Response as an error if\n * it is outside the 200 range.\n *\n * @param {Response} response\n * @return {Response} The response if the status is in the 200 range.\n */\nconst checkStatus = response => {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  throw response;\n};\n\n/** @typedef {(options: import('./types').APIFetchOptions) => Promise<any>} FetchHandler*/\n\n/**\n * @type {FetchHandler}\n */\nconst defaultFetchHandler = nextOptions => {\n  const {\n    url,\n    path,\n    data,\n    parse = true,\n    ...remainingOptions\n  } = nextOptions;\n  let {\n    body,\n    headers\n  } = nextOptions;\n\n  // Merge explicitly-provided headers with default values.\n  headers = {\n    ...DEFAULT_HEADERS,\n    ...headers\n  };\n\n  // The `data` property is a shorthand for sending a JSON body.\n  if (data) {\n    body = JSON.stringify(data);\n    headers['Content-Type'] = 'application/json';\n  }\n  const responsePromise = window.fetch(\n  // Fall back to explicitly passing `window.location` which is the behavior if `undefined` is passed.\n  url || path || window.location.href, {\n    ...DEFAULT_OPTIONS,\n    ...remainingOptions,\n    body,\n    headers\n  });\n  return responsePromise.then(value => Promise.resolve(value).then(checkStatus).catch(response => parseAndThrowError(response, parse)).then(response => parseResponseAndNormalizeError(response, parse)), err => {\n    // Re-throw AbortError for the users to handle it themselves.\n    if (err && err.name === 'AbortError') {\n      throw err;\n    }\n\n    // Otherwise, there is most likely no network connection.\n    // Unfortunately the message might depend on the browser.\n    throw {\n      code: 'fetch_error',\n      message: __('You are probably offline.')\n    };\n  });\n};\n\n/** @type {FetchHandler} */\nlet fetchHandler = defaultFetchHandler;\n\n/**\n * Defines a custom fetch handler for making the requests that will override\n * the default one using window.fetch\n *\n * @param {FetchHandler} newFetchHandler The new fetch handler\n */\nfunction setFetchHandler(newFetchHandler) {\n  fetchHandler = newFetchHandler;\n}\n\n/**\n * @template T\n * @param {import('./types').APIFetchOptions} options\n * @return {Promise<T>} A promise representing the request processed via the registered middlewares.\n */\nfunction apiFetch(options) {\n  // creates a nested function chain that calls all middlewares and finally the `fetchHandler`,\n  // converting `middlewares = [ m1, m2, m3 ]` into:\n  // ```\n  // opts1 => m1( opts1, opts2 => m2( opts2, opts3 => m3( opts3, fetchHandler ) ) );\n  // ```\n  const enhancedHandler = middlewares.reduceRight(( /** @type {FetchHandler} */next, middleware) => {\n    return workingOptions => middleware(workingOptions, next);\n  }, fetchHandler);\n  return enhancedHandler(options).catch(error => {\n    if (error.code !== 'rest_cookie_invalid_nonce') {\n      return Promise.reject(error);\n    }\n\n    // If the nonce is invalid, refresh it and try again.\n    return window\n    // @ts-ignore\n    .fetch(apiFetch.nonceEndpoint).then(checkStatus).then(data => data.text()).then(text => {\n      // @ts-ignore\n      apiFetch.nonceMiddleware.nonce = text;\n      return apiFetch(options);\n    });\n  });\n}\napiFetch.use = registerMiddleware;\napiFetch.setFetchHandler = setFetchHandler;\napiFetch.createNonceMiddleware = createNonceMiddleware;\napiFetch.createPreloadingMiddleware = createPreloadingMiddleware;\napiFetch.createRootURLMiddleware = createRootURLMiddleware;\napiFetch.fetchAllMiddleware = fetchAllMiddleware;\napiFetch.mediaUploadMiddleware = mediaUploadMiddleware;\napiFetch.createThemePreviewMiddleware = createThemePreviewMiddleware;\nexport default apiFetch;\n//# sourceMappingURL=index.js.map","import apiFetch from '@wordpress/api-fetch';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { addQueryArgs } from '@wordpress/url';\n\napiFetch.fetchAllMiddleware = null;\n\napiFetch.use(apiFetch.createRootURLMiddleware(window?.parent?.scData?.root_url || window?.scData?.root_url));\n\nif (window?.scData?.nonce) {\n  // @ts-ignore\n  apiFetch.nonceMiddleware = apiFetch.createNonceMiddleware(window?.scData?.nonce);\n  // @ts-ignore\n  apiFetch.use(apiFetch.nonceMiddleware);\n}\n\nif (window?.scData?.nonce_endpoint) {\n  // @ts-ignore\n  apiFetch.nonceEndpoint = window?.scData?.nonce_endpoint;\n}\n\n// Add a timestamp so it can bypass cache rest api\napiFetch.use((options, next) => {\n  options.path = addQueryArgs(options.path, { t: Date.now() });\n  return next(options);\n});\n\napiFetch.use((options, next) => {\n  const result = next(options);\n  result.catch(response => {\n    if (response.code === 'invalid_json') {\n      response.message = __('The response is not a valid JSON response.', 'surecart');\n      const debugSettingsUrl = 'https://surecart.com/docs/is-not-a-valid-json-response/';\n      response.additional_errors = [\n        {\n          code: 'invalid_json',\n          message: sprintf(\n            /* translators: %s: URL to debug settings page */\n            __('Please ensure that your site is not in debug mode as this may interfere with API responses. %s', 'surecart'),\n            `<a href=\"${debugSettingsUrl}\" target=\"_blank\" rel=\"noopener noreferrer\">${__('More Information', 'surecart')}</a>`,\n          ),\n        },\n      ];\n    }\n    return Promise.reject(response);\n  });\n\n  return result;\n});\n\nexport default apiFetch;\n\n/**\n * Calls the `json` function on the Response, throwing an error if the response\n * doesn't have a json function or if parsing the json itself fails.\n *\n * @param {Response} response\n * @return {Promise<any>} Parsed response.\n */\nexport const parseJsonAndNormalizeError = response => {\n  const invalidJsonError = {\n    code: 'invalid_json',\n    message: __('The response is not a valid JSON response.', 'surecart'),\n  };\n\n  if (response?.code && response?.message) {\n    throw response;\n  }\n\n  if (!response || !response.json) {\n    throw invalidJsonError;\n  }\n\n  return response.json().catch(() => {\n    throw invalidJsonError;\n  });\n};\n\nexport const handleNonceError = async response => {\n  // need to parse the error response since we are bypassing the apiFetch middleware.\n  const error = await parseJsonAndNormalizeError(response);\n\n  if (error.code !== 'rest_cookie_invalid_nonce') {\n    // console.error(error);\n    throw error;\n  }\n\n  // If the nonce is invalid, refresh it and try again.\n  return (\n    window\n      // @ts-ignore\n      .fetch(apiFetch.nonceEndpoint)\n      .then(response => {\n        if (response.status >= 200 && response.status < 300) {\n          return response;\n        }\n        throw response;\n      })\n      .then(data => data.text())\n      .then(text => {\n        // @ts-ignore\n        apiFetch.nonceMiddleware.nonce = text;\n      })\n  );\n};\n"],"version":3}