{"version":3,"file":"processors-store.spec.js","sourceRoot":"","sources":["../../../../src/store/processors/test/processors-store.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { state as checkoutState, dispose as disposeCheckout } from '../../checkout';\nimport { Checkout, ManualPaymentMethod, PaymentMethodType, Processor } from '../../../types';\nimport {\n  availableManualPaymentMethods,\n  availableMethodChoices,\n  availableMethodTypes,\n  availableProcessorChoices,\n  availableProcessors,\n  getAvailableProcessor,\n  hasMultipleMethodChoices,\n  hasMultipleProcessorChoices,\n  hasOtherAvailableCreditCardProcessor,\n} from '../getters';\nimport { state as processorsState, dispose as disposeProcessors } from '../index';\nimport { state as selectedProcessor } from '@store/selected-processor';\n\ndescribe('Processors store', () => {\n  beforeEach(() => {\n    disposeCheckout();\n    disposeProcessors();\n  });\n\n  describe('getters', () => {\n    describe('availableProcessors', () => {\n      it('returns all processors if no checkout', () => {\n        processorsState.processors = [\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: false,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n        expect(availableProcessors()).toEqual(processorsState.processors);\n      });\n\n      it('filters processors by mode', () => {\n        processorsState.processors = [\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: false,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n        checkoutState.formId = 1;\n        checkoutState.mode = 'test';\n        expect(availableProcessors()).toEqual([]);\n\n        processorsState.processors = [\n          {\n            live_mode: false,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n        expect(availableProcessors()).toEqual([\n          {\n            live_mode: false,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n        ]);\n      });\n\n      it('filters processors by recurring', () => {\n        processorsState.processors = [\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: false,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n\n        checkoutState.formId = 2;\n        checkoutState.mode = 'live';\n        checkoutState.checkout = {\n          live_mode: true,\n          reusable_payment_method_required: true,\n        } as Checkout;\n\n        expect(availableProcessors()).toEqual([\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n        ]);\n      });\n\n      it('sorts processors by sort order', () => {\n        processorsState.sortOrder.processors = ['paypal', 'stripe'];\n        processorsState.processors = [\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: false,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n\n        expect(availableProcessors()).toEqual([\n          {\n            live_mode: true,\n            recurring_enabled: false,\n            processor_type: 'paypal',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n        ]);\n      });\n    });\n\n    describe('getAvailableProcessor', () => {\n      it('gets the processor only if it is available', () => {\n        processorsState.processors = [\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: false,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n        checkoutState.formId = 1;\n        checkoutState.mode = 'test';\n        expect(getAvailableProcessor('stripe')).toEqual(undefined);\n\n        processorsState.processors = [\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: false,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n        checkoutState.formId = 1;\n        checkoutState.mode = 'live';\n        expect(getAvailableProcessor('stripe')).toEqual({\n          live_mode: true,\n          recurring_enabled: true,\n          processor_type: 'stripe',\n        });\n      });\n    });\n\n    describe('hasOtherAvailableCreditCardProcessor', () => {\n      it('should return true when there is another available credit card processor', () => {\n        processorsState.processors = [\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'paystack',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n        const hasOtherProcessor = hasOtherAvailableCreditCardProcessor('stripe');\n        expect(hasOtherProcessor).toEqual(true);\n      });\n\n      it('should return undefined when there are no other available credit card processors', () => {\n        const hasOtherProcessor = hasOtherAvailableCreditCardProcessor('paypal');\n        expect(hasOtherProcessor).toBe(false);\n      });\n    });\n\n    describe('availableManualPaymentMethods', () => {\n      it('is empty if reusable payment method is required', () => {\n        processorsState.manualPaymentMethods = [\n          {\n            id: 'test1',\n            name: 'Test 1',\n            description: 'Test 1',\n          },\n          {\n            id: 'test1',\n            name: 'Test 2',\n            description: 'Test 2',\n          },\n        ] as ManualPaymentMethod[];\n        checkoutState.formId = 2;\n        checkoutState.mode = 'live';\n        checkoutState.checkout = {\n          live_mode: true,\n          reusable_payment_method_required: true,\n        } as Checkout;\n        expect(availableManualPaymentMethods()).toEqual([]);\n      });\n\n      it('gets all manual methods if recurring is not required', () => {\n        processorsState.manualPaymentMethods = [\n          {\n            id: 'test1',\n            name: 'Test 1',\n            description: 'Test 1',\n          },\n          {\n            id: 'test1',\n            name: 'Test 2',\n            description: 'Test 2',\n          },\n        ] as ManualPaymentMethod[];\n        checkoutState.formId = 2;\n        checkoutState.mode = 'live';\n        checkoutState.checkout = {\n          live_mode: true,\n          reusable_payment_method_required: false,\n        } as Checkout;\n        expect(availableManualPaymentMethods()).toEqual(processorsState.manualPaymentMethods);\n      });\n    });\n\n    describe('availableMethodTypes', () => {\n      it('shows credit card, then paypal by default', () => {\n        processorsState.methods = [\n          {\n            id: 'ideal',\n            description: 'Test 1',\n          },\n          {\n            id: 'paypal',\n            description: 'Test 1',\n          },\n          {\n            id: 'creditcard',\n            description: 'Test 2',\n          },\n        ] as PaymentMethodType[];\n\n        expect(availableMethodTypes()).toEqual([\n          {\n            id: 'creditcard',\n            description: 'Test 2',\n          },\n          {\n            id: 'paypal',\n            description: 'Test 1',\n          },\n          {\n            id: 'ideal',\n            description: 'Test 1',\n          },\n        ]);\n      });\n      it('can have a custom order', () => {\n        processorsState.methods = [\n          {\n            id: 'ideal',\n            description: 'Test 1',\n          },\n          {\n            id: 'paypal',\n            description: 'Test 1',\n          },\n          {\n            id: 'creditcard',\n            description: 'Test 2',\n          },\n        ] as PaymentMethodType[];\n        processorsState.sortOrder.paymentMethods.mollie = ['ideal', 'paypal', 'creditcard'];\n\n        expect(availableMethodTypes()).toEqual([\n          {\n            id: 'ideal',\n            description: 'Test 1',\n          },\n          {\n            id: 'paypal',\n            description: 'Test 1',\n          },\n          {\n            id: 'creditcard',\n            description: 'Test 2',\n          },\n        ]);\n      });\n    });\n\n    describe('availableProcessorChoices, hasMultipleProcessorChoices', () => {\n      it('shows both available processors and available payment methods', () => {\n        processorsState.processors = [\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n          {\n            live_mode: true,\n            recurring_enabled: false,\n            processor_type: 'paypal',\n          },\n        ] as Processor[];\n        processorsState.manualPaymentMethods = [\n          {\n            id: 'test1',\n            name: 'Test 1',\n            description: 'Test 1',\n          },\n          {\n            id: 'test1',\n            name: 'Test 2',\n            description: 'Test 2',\n          },\n        ] as ManualPaymentMethod[];\n        checkoutState.formId = 2;\n        checkoutState.mode = 'live';\n        checkoutState.checkout = {\n          live_mode: true,\n        } as Checkout;\n        expect(availableProcessorChoices()).toEqual([...processorsState.processors, ...processorsState.manualPaymentMethods]);\n        expect(hasMultipleProcessorChoices()).toBeTruthy();\n\n        checkoutState.checkout = {\n          live_mode: true,\n          reusable_payment_method_required: true,\n        } as Checkout;\n        expect(availableProcessorChoices()).toEqual([\n          {\n            live_mode: true,\n            recurring_enabled: true,\n            processor_type: 'stripe',\n          },\n        ]);\n        expect(hasMultipleProcessorChoices()).toBeFalsy();\n      });\n    });\n\n    describe('availableMethodChoices, hasMultipleMethodChoices', () => {\n      it('shows both available processors and available payment methods', () => {\n        processorsState.methods = [\n          {\n            id: 'creditcard',\n            description: 'Test 2',\n          },\n        ] as PaymentMethodType[];\n        processorsState.manualPaymentMethods = [\n          {\n            id: 'test1',\n            name: 'Test 1',\n            description: 'Test 1',\n          },\n          {\n            id: 'test1',\n            name: 'Test 2',\n            description: 'Test 2',\n          },\n        ] as ManualPaymentMethod[];\n        checkoutState.formId = 2;\n        checkoutState.mode = 'live';\n        checkoutState.checkout = {\n          live_mode: true,\n        } as Checkout;\n        expect(availableMethodChoices()).toEqual([...processorsState.methods, ...processorsState.manualPaymentMethods]);\n        expect(hasMultipleMethodChoices()).toBeTruthy();\n\n        checkoutState.checkout = {\n          live_mode: true,\n          reusable_payment_method_required: true,\n        } as Checkout;\n\n        expect(availableMethodChoices()).toEqual([\n          {\n            id: 'creditcard',\n            description: 'Test 2',\n          },\n        ]);\n        expect(hasMultipleProcessorChoices()).toBeFalsy();\n      });\n    });\n  });\n\n  describe('watchers', () => {\n    // TODO: get working again.\n    it.skip('changes the selected processor if it is not available', () => {\n      processorsState.processors = [\n        {\n          live_mode: true,\n          recurring_enabled: true,\n          processor_type: 'stripe',\n        },\n        {\n          live_mode: true,\n          recurring_enabled: false,\n          processor_type: 'paypal',\n        },\n      ] as Processor[];\n      processorsState.manualPaymentMethods = [\n        {\n          id: 'test1',\n          name: 'Test 1',\n          description: 'Test 1',\n        },\n        {\n          id: 'test2',\n          name: 'Test 2',\n          description: 'Test 2',\n        },\n      ] as ManualPaymentMethod[];\n      selectedProcessor.id = 'test1';\n      expect(selectedProcessor.id).toBe('test1');\n\n      checkoutState.formId = 2;\n      checkoutState.mode = 'live';\n      checkoutState.checkout = {\n        live_mode: true,\n        reusable_payment_method_required: true,\n      } as Checkout;\n\n      expect(selectedProcessor.id).toBe('stripe');\n\n      checkoutState.checkout = {\n        live_mode: true,\n        reusable_payment_method_required: false,\n      } as Checkout;\n\n      selectedProcessor.id = 'test2';\n      expect(selectedProcessor.id).toBe('test2');\n      checkoutState.checkout = {\n        live_mode: true,\n        reusable_payment_method_required: true,\n        amount_due: 1000,\n      } as Checkout;\n      expect(selectedProcessor.id).toBe('stripe');\n    });\n  });\n});\n"]}