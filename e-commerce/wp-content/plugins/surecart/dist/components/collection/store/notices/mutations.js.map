{"version":3,"file":"mutations.js","sourceRoot":"","sources":["../../../src/store/notices/mutations.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,OAAO,EAAE,EAAE,EAAE,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAC;AAExC;;GAEG;AACH,OAAO,KAAK,MAAM,SAAS,CAAC;AAG5B;;GAEG;AACH,MAAM,cAAc,GAAG;IACrB,WAAW,EAAE,KAAK;CACnB,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,MAAkB,EAAE,MAAqB,EAAE,OAAO,GAAG,cAAc,EAAE,EAAE;IAClG,qEAAqE;IACrE,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;QAC/B,MAAM,GAAG;YACP,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,MAAM;YACf,IAAI,EAAE,EAAE;SACT,CAAC;IACJ,CAAC;IAED,sDAAsD;IACtD,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,CAAA,EAAE,CAAC;QACrB,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC,yCAAyC,EAAE,UAAU,CAAC,CAAC;IAC7E,CAAC;IAED,uBAAuB;IACvB,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;IAEpB,4BAA4B;IAC5B,MAAM,GAAG,EAAE,GAAG,OAAO,EAAE,GAAG,MAAM,EAAE,CAAC;IAEnC,0BAA0B;IAC1B,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAEnC,sCAAsC;IACtC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;QAChC,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,MAAM,EAAE,OAAO,GAAG,cAAc,EAAE,EAAE;IACpE,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AACzC,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,MAAM,EAAE,OAAO,GAAG,cAAc,EAAE,EAAE;IACtE,YAAY,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,MAAM,EAAE,OAAO,GAAG,cAAc,EAAE,EAAE;IACnE,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,MAAM,EAAE,OAAO,GAAG,cAAc,EAAE,EAAE;IACtE,YAAY,CAAC,SAAS,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,GAAG,EAAE;IAC/B,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC;IACvB,KAAK,CAAC,IAAI,GAAG,EAAE,CAAC;IAChB,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;IACnB,KAAK,CAAC,IAAI,GAAG;QACX,MAAM,EAAE,CAAC;QACT,IAAI,EAAE,EAAE;QACR,WAAW,EAAE,EAAE;KAChB,CAAC;IACF,KAAK,CAAC,iBAAiB,GAAG,EAAE,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["/**\n * External dependencies.\n */\nimport { __ } from '@wordpress/i18n';\nimport { speak } from '@wordpress/a11y';\n\n/**\n * Internal dependencies.\n */\nimport state from './store';\nimport { NoticeType, ScNoticeStore } from '../../types';\n\n/**\n * Default notice options.\n */\nconst defaultOptions = {\n  dismissible: false,\n};\n\n/**\n * Create a notice.\n *\n * @param {NoticeType} status\n * @param {ScNoticeStore} notice\n */\nexport const createNotice = (status: NoticeType, notice: ScNoticeStore, options = defaultOptions) => {\n  // if notice is a string, then it is message, else the notice object.\n  if (typeof notice === 'string') {\n    notice = {\n      type: status,\n      message: notice,\n      code: '',\n    };\n  }\n\n  // If no notice message, then set the default message.\n  if (!notice?.message) {\n    notice.message = __('Something went wrong. Please try again.', 'surecart');\n  }\n\n  // Set the notice type.\n  state.type = status;\n\n  // Merge options and notice.\n  notice = { ...options, ...notice };\n\n  // speak the error notice.\n  speak(notice.message, 'assertive');\n\n  // Set notice properties to the state.\n  Object.keys(notice).forEach(key => {\n    state[key] = notice[key];\n  });\n};\n\n/**\n * Create an error notice.\n *\n * @param {ScNoticeStore} notice\n * @param {object} options\n */\nexport const createErrorNotice = (notice, options = defaultOptions) => {\n  createNotice('error', notice, options);\n};\n\n/**\n * Create a success notice.\n *\n * @param {ScNoticeStore} notice\n * @param {object} options\n */\nexport const createSuccessNotice = (notice, options = defaultOptions) => {\n  createNotice('success', notice, options);\n};\n\n/**\n * Create an info notice.\n *\n * @param {ScNoticeStore} notice\n * @param {object} options\n */\nexport const createInfoNotice = (notice, options = defaultOptions) => {\n  createNotice('info', notice, options);\n};\n\n/**\n * Create a warning notice.\n *\n * @param {ScNoticeStore} notice\n * @param {object} options\n */\nexport const createWarningNotice = (notice, options = defaultOptions) => {\n  createNotice('warning', notice, options);\n};\n\n/**\n * Remove the notice.\n */\nexport const removeNotice = () => {\n  state.type = 'default';\n  state.code = '';\n  state.message = '';\n  state.data = {\n    status: 0,\n    type: '',\n    http_status: '',\n  };\n  state.additional_errors = [];\n};\n"]}