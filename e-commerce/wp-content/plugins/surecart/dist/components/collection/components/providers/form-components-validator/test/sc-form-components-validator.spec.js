import{h}from"@stencil/core";import{newSpecPage}from"@stencil/core/testing";import{dispose as disposeCheckout,state as checkoutState}from"../../../../store/checkout/index";import{ScFormComponentsValidator}from"../sc-form-components-validator";describe("sc-form-components-validator",(()=>{beforeEach((()=>{disposeCheckout()})),it("renders",(async()=>{const e=await newSpecPage({components:[ScFormComponentsValidator],html:"<sc-form-components-validator></sc-form-components-validator>"});expect(e.root).toMatchSnapshot(),e.rootInstance.disconnectedCallback()})),it("appends missing address field if required",(async()=>{const e=await newSpecPage({components:[ScFormComponentsValidator],template:()=>h("sc-form-components-validator",null,h("sc-payment",null))});checkoutState.checkout={tax_status:"address_invalid"},await e.waitForChanges(),expect(e.root).toMatchSnapshot(),e.rootInstance.disconnectedCallback()})),it("appends missing tax id input if required",(async()=>{const e=await newSpecPage({components:[ScFormComponentsValidator],template:()=>h("sc-form-components-validator",{taxProtocol:{tax_enabled:!0,eu_vat_required:!0}},h("sc-payment",null))});await e.waitForChanges(),expect(e.root).toMatchSnapshot(),e.rootInstance.disconnectedCallback()})),it("appends missing trial line item if required",(async()=>{const e=await newSpecPage({components:[ScFormComponentsValidator],template:()=>h("sc-form-components-validator",null,h("sc-order-summary",null,h("sc-line-item-total",{total:"subtotal"})))});checkoutState.checkout={trial_amount:10},await e.waitForChanges(),expect(e.root).toMatchSnapshot(),e.rootInstance.disconnectedCallback()})),it("appends missing address field with shipping address required",(async()=>{const e=await newSpecPage({components:[ScFormComponentsValidator],template:()=>h("sc-form-components-validator",null,h("sc-payment",null))});checkoutState.checkout={shipping_address_required:!0},await e.waitForChanges(),expect(e.root).toMatchSnapshot(),e.rootInstance.disconnectedCallback()})),it("requires the customer name on sc-customer-name if present in page and shipping address required",(async()=>{const e=await newSpecPage({components:[ScFormComponentsValidator],template:()=>h("sc-form-components-validator",null,h("sc-payment",null),h("sc-customer-name",null))});checkoutState.checkout={shipping_address_required:!0},await e.waitForChanges();const t=e.root.querySelector("sc-customer-name");expect(t.required).toBe(!0);const o=e.root.querySelector("sc-order-shipping-address");expect(o.required).toBe(!0),expect(!!o.requireName).toBe(!1),expect(!!o.showName).toBe(!1),expect(e.root).toMatchSnapshot(),e.rootInstance.disconnectedCallback()})),it("requires the customer name on sc-order-shipping-address if shipping address is required",(async()=>{const e=await newSpecPage({components:[ScFormComponentsValidator],template:()=>h("sc-form-components-validator",null,h("sc-payment",null))});checkoutState.checkout={shipping_address_required:!0},await e.waitForChanges();const t=e.root.querySelector("sc-order-shipping-address");expect(t.required).toBe(!0),expect(t.requireName).toBe(!0),expect(t.showName).toBe(!0),expect(e.root).toMatchSnapshot(),e.rootInstance.disconnectedCallback()}))}));