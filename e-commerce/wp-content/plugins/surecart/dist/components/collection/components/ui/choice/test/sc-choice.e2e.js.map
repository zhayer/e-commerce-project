{"version":3,"file":"sc-choice.e2e.js","sourceRoot":"","sources":["../../../../../src/components/ui/choice/test/sc-choice.e2e.ts"],"names":[],"mappings":"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","sourcesContent":["import { newE2EPage } from '@stencil/core/testing';\n\ndescribe('sc-choice', () => {\n  let page, element, label, input;\n\n  const selector = 'sc-choice';\n\n  beforeEach(async () => {\n    page = await newE2EPage();\n    await page.setContent(`<${selector}></${selector}>`);\n    element = await page.find(`${selector}`);\n    label = await page.find(`${selector} >>> .choice`);\n    input = await page.find(`${selector} >>> input`);\n  });\n\n  it('renders', async () => {\n    const page = await newE2EPage();\n    await page.setContent('<sc-choice></sc-choice>');\n\n    const element = await page.find(selector);\n    expect(element).toHaveClass('hydrated');\n  });\n\n  // it('Can report validity', async () => {\n  //   let page = await newE2EPage();\n  //   await page.setContent(`<${selector} required name=\"test\" type=\"checkbox\"></${selector}>`);\n  //   element = await page.find(`${selector}`);\n\n  //   let result = await element.callMethod('reportValidity');\n  //   expect(result).toBeFalsy();\n\n  //   result = await element.callMethod('setCustomValidity', 'message');\n  //   expect(result).toBeFalsy();\n  //   expect(label).not.toHaveClasses(['choice--checked', 'choice--focused']);\n\n  //   page = await newE2EPage();\n  //   await page.setContent(`<${selector} required name=\"test\" type=\"checkbox\" checked></${selector}>`);\n  //   element = await page.find(`${selector}`);\n\n  //   result = await element.callMethod('reportValidity');\n  //   expect(result).toBeTruthy();\n  // });\n\n  it('Should be clickable', async () => {\n    const scBlur = await page.spyOnEvent('scBlur');\n    const scFocus = await page.spyOnEvent('scFocus');\n\n    expect(label).toHaveClass('choice');\n    expect(label).not.toHaveClasses(['choice--checked', 'choice--focused']);\n\n    await input.click();\n    await page.waitForChanges();\n    expect(label).toHaveClass('choice');\n    expect(label).toHaveClasses(['choice--checked', 'choice--focused']);\n    expect(scFocus).toHaveReceivedEvent();\n\n    await page.$eval(selector, e => e.blur());\n    await page.waitForChanges();\n    expect(label).not.toHaveClass('choice--focused');\n    expect(scBlur).toHaveReceivedEvent();\n  });\n\n  it('Can be disabled', async () => {\n    expect(input).not.toHaveAttribute('disabled');\n    element.setProperty('disabled', true);\n    await page.waitForChanges();\n    expect(label).toHaveClasses(['choice', 'choice--disabled']);\n    expect(input).toHaveAttribute('disabled');\n  });\n\n  it('Can be radio or checkbox', async () => {\n    expect(input).toEqualAttribute('type', 'radio');\n    element.setProperty('type', 'checkbox');\n    await page.waitForChanges();\n    expect(input).toEqualAttribute('type', 'checkbox');\n  });\n\n  // it('Can be required', async () => {\n  //   page = await newE2EPage();\n  //   await page.setContent(`\n  //   <sc-form>\n  //     <sc-choice required name=\"test\"></sc-choice>\n  //   </sc-form>`);\n  //   element = await page.find(`sc-choice`);\n  //   const form = await page.find(`sc-form`);\n  //   form.callMethod('submit');\n  //   await page.waitForChanges();\n  //   expect(element).toHaveAttribute('invalid');\n  // });\n});\n"]}