{"version":3,"file":"sc-input.js","sourceRoot":"","sources":["../../../../src/components/ui/input/sc-input.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, State, Watch, h, Event, EventEmitter, Method, Element, Host, Listen } from '@stencil/core';\nimport { FormSubmitController } from '../../../functions/form-data';\n\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part prefix - Used to prepend an icon or element to the input.\n * @part suffix - Used to prepend an icon or element to the input.\n */\n@Component({\n  tag: 'sc-input',\n  styleUrl: 'sc-input.scss',\n  shadow: true,\n})\nexport class ScInput {\n  private input: HTMLInputElement;\n  private inputId: string = `input-${++id}`;\n  private helpId = `input-help-text-${id}`;\n  private labelId = `input-label-${id}`;\n\n  /** Element */\n  @Element() el: HTMLScInputElement;\n\n  private formController: any;\n\n  @Prop() squared: boolean;\n  @Prop() squaredBottom: boolean;\n  @Prop() squaredTop: boolean;\n  @Prop() squaredLeft: boolean;\n  @Prop() squaredRight: boolean;\n\n  /** Hidden */\n  @Prop() hidden: boolean = false;\n\n  /** The input's type. */\n  @Prop({ reflect: true }) type: 'email' | 'number' | 'password' | 'search' | 'tel' | 'text' | 'url' | 'hidden' = 'text';\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's name attribute. */\n  @Prop({ reflect: true }) name: string;\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true, reflect: true }) value = '';\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** Adds a clear button when the input is populated. */\n  @Prop() clearable = false;\n\n  /** Adds a password toggle button to password inputs. */\n  @Prop() togglePassword: boolean = false;\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** The minimum length of input that will be considered valid. */\n  @Prop() minlength: number;\n\n  /** The maximum length of input that will be considered valid. */\n  @Prop() maxlength: number;\n\n  /** The input's minimum value. */\n  @Prop() min: number | string;\n\n  /** The input's maximum value. */\n  @Prop() max: number | string;\n\n  /** The input's step attribute. */\n  @Prop() step: number;\n\n  /** A pattern to validate input against. */\n  @Prop() pattern: string;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid = false;\n\n  /** The input's autocorrect attribute. */\n  @Prop() autocorrect: string;\n\n  /** The input's autocomplete attribute. */\n  @Prop() autocomplete: string;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Enables spell checking on the input. */\n  @Prop() spellcheck: boolean;\n\n  /** The input's inputmode attribute. */\n  @Prop() inputmode: 'none' | 'text' | 'decimal' | 'numeric' | 'tel' | 'search' | 'email' | 'url';\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  /** Is the password visible */\n  @State() isPasswordVisible = false;\n\n  /** Emitted when the control's value changes. */\n  @Event({ composed: true })\n  scChange: EventEmitter<void>;\n\n  /** Emitted when the clear button is activated. */\n  @Event() scClear: EventEmitter<void>;\n\n  /** Emitted when the control receives input. */\n  @Event({ cancelable: true }) scInput: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Sets focus on the input. */\n  @Method()\n  async triggerFocus(options?: FocusOptions) {\n    return this.input.focus(options);\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  @Method()\n  async setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  /** Removes focus from the input. */\n  @Method()\n  async triggerBlur() {\n    return this.input.blur();\n  }\n\n  /** Prevent mouse scroll wheel from modifying input value */\n  @Listen('wheel')\n  handleWheel() {\n    if (this.type === 'number') {\n      this.input?.blur();\n    }\n  }\n\n  /** Selects all the text in the input. */\n  select() {\n    return this.input.select();\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  handleChange() {\n    this.value = this.input.value;\n    this.scChange.emit();\n  }\n\n  handleInput() {\n    this.value = this.input.value;\n    this.scInput.emit();\n  }\n\n  handleClearClick(event: MouseEvent) {\n    this.value = '';\n    this.scClear.emit();\n    this.scInput.emit();\n    this.scChange.emit();\n    this.input.focus();\n\n    event.stopPropagation();\n  }\n\n  handlePasswordToggle() {\n    this.isPasswordVisible = !this.isPasswordVisible;\n  }\n\n  @Watch('hasFocus')\n  handleFocusChange() {\n    setTimeout(() => {\n      this.hasFocus && this.input ? this.input.focus() : this.input.blur();\n    }, 0);\n  }\n\n  @Watch('value')\n  handleValueChange() {\n    if (this.input) {\n      this.invalid = !this.input.checkValidity();\n    }\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el).addFormData();\n    this.handleFocusChange();\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n  }\n\n  render() {\n    return (\n      <Host hidden={this.hidden}>\n        <sc-form-control\n          exportparts=\"label, help-text, form-control\"\n          size={this.size}\n          required={this.required}\n          label={this.label}\n          showLabel={this.showLabel}\n          help={this.help}\n          inputId={this.inputId}\n          helpId={this.helpId}\n          labelId={this.labelId}\n          name={this.name}\n        >\n          <slot name=\"label-end\" slot=\"label-end\"></slot>\n          <div\n            part=\"base\"\n            class={{\n              'input': true,\n\n              // Sizes\n              'input--small': this.size === 'small',\n              'input--medium': this.size === 'medium',\n              'input--large': this.size === 'large',\n\n              // States\n              'input--focused': this.hasFocus,\n              'input--invalid': this.invalid,\n              'input--disabled': this.disabled,\n\n              'input--squared': this.squared,\n              'input--squared-bottom': this.squaredBottom,\n              'input--squared-top': this.squaredTop,\n              'input--squared-left': this.squaredLeft,\n              'input--squared-right': this.squaredRight,\n            }}\n          >\n            <span part=\"prefix\" class=\"input__prefix\">\n              <slot name=\"prefix\"></slot>\n            </span>\n\n            <slot>\n              <input\n                part=\"input\"\n                id={this.inputId}\n                class=\"input__control\"\n                ref={el => (this.input = el as HTMLInputElement)}\n                type={this.type === 'password' && this.isPasswordVisible ? 'text' : this.type}\n                name={this.name}\n                disabled={this.disabled}\n                readonly={this.readonly}\n                required={this.required}\n                placeholder={this.placeholder}\n                minlength={this.minlength}\n                maxlength={this.maxlength}\n                min={this.min}\n                max={this.max}\n                step={this.step}\n                // TODO: Test These below\n                autocomplete={this.autocomplete}\n                autocorrect={this.autocorrect}\n                autofocus={this.autofocus}\n                spellcheck={this.spellcheck}\n                pattern={this.pattern}\n                inputmode={this.inputmode}\n                aria-label={this.label}\n                aria-labelledby={this.labelId}\n                aria-invalid={this.invalid ? true : false}\n                value={this.value}\n                onChange={() => this.handleChange()}\n                onInput={() => this.handleInput()}\n                // onInvalid={this.handleInvalid}\n                onFocus={() => this.handleFocus()}\n                onBlur={() => this.handleBlur()}\n                onKeyDown={e => {\n                  // Only stop propagation on keys that are not handled by the browser\n                  if (!['Enter', 'ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown', 'Tab'].includes(e.key)) {\n                    e.stopPropagation();\n                  }\n                }}\n              />\n            </slot>\n\n            <span part=\"suffix\" class=\"input__suffix\">\n              <slot name=\"suffix\"></slot>\n            </span>\n\n            {this.clearable && this.value?.length > 0 && (\n              <button part=\"clear-button\" class=\"input__clear\" type=\"button\" onClick={e => this.handleClearClick(e)} tabindex=\"-1\">\n                <slot name=\"clear-icon\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"16\"\n                    height=\"16\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    stroke-width=\"2\"\n                    stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\"\n                    class=\"feather feather-x\"\n                  >\n                    <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                    <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                  </svg>\n                </slot>\n              </button>\n            )}\n          </div>\n        </sc-form-control>\n      </Host>\n    );\n  }\n}\n"]}