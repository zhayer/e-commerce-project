{"version":3,"file":"sc-toggles.js","sourceRoot":"","sources":["../../../../src/components/ui/sc-toggles/sc-toggles.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAO3E,MAAM,OAAO,SAAS;;yBAKS,KAAK;2BAGH,IAAI;qBAGM,SAAS;;IAElD,UAAU;;QACR,IAAI,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,MAAM,CAAoB,CAAC;QAC1E,IAAI,CAAC,OAAO;YAAE,OAAO;QACrB,OAAO,CAAC,MAAA,MAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,aAAa,uDAAI,0CAAE,MAAM,mDAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,WAAW,CAA2B,KAAI,EAAE,CAAC;IACtH,CAAC;IAGD,gBAAgB,CAAC,CAAC;QAChB,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,KAAK,WAAW;YAAE,OAAO;QAC7C,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,MAAM,KAAK,OAAO,CAAC,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IAGD,sBAAsB;QACpB,IAAI,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAClC,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;YAC5D,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC;QACzB,CAAC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,GAAG,GAAG,WAAW,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;QAC3D,OAAO,CACL,EAAC,GAAG,qDAAC,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,kBAAkB,IAAI,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,IAAI,EAAC,MAAM;YAChF,8DAAa,CACT,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Element, h, Listen, Prop, Watch } from '@stencil/core';\n\n@Component({\n  tag: 'sc-toggles',\n  styleUrl: 'sc-toggles.scss',\n  shadow: true,\n})\nexport class ScToggles {\n  /** The element */\n  @Element() el: HTMLScTogglesElement;\n\n  /** Should this function as an accordion? */\n  @Prop() accordion: boolean = false;\n\n  /** Are these collapsible? */\n  @Prop() collapsible: boolean = true;\n\n  /** Theme for the toggles */\n  @Prop() theme: 'default' | 'container' = 'default';\n\n  getToggles() {\n    let slotted = this.el.shadowRoot.querySelector('slot') as HTMLSlotElement;\n    if (!slotted) return;\n    return (slotted?.assignedNodes?.()?.filter?.(node => node.nodeName === 'SC-TOGGLE') as HTMLScToggleElement[]) || [];\n  }\n\n  @Listen('scShow')\n  handleShowChange(e) {\n    if (e.target.tagName !== 'SC-TOGGLE') return;\n    if (this.accordion) {\n      this.getToggles().map(details => (details.open = e.target === details));\n    }\n  }\n\n  @Watch('collapsible')\n  handleCollapibleChange() {\n    this.getToggles().map(details => (details.collapsible = this.collapsible));\n  }\n\n  componentDidLoad() {\n    this.handleCollapibleChange();\n    const toggles = this.getToggles();\n    if (toggles?.length && !toggles.some(toggle => toggle.open)) {\n      toggles[0].open = true;\n    }\n  }\n\n  render() {\n    const Tag = 'container' === this.theme ? 'sc-card' : 'div';\n    return (\n      <Tag class={{ toggles: true, [`toggles--theme-${this.theme}`]: true }} part=\"base\" no-padding>\n        <slot></slot>\n      </Tag>\n    );\n  }\n}\n"]}