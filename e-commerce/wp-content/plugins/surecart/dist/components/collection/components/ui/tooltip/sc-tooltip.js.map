{"version":3,"file":"sc-tooltip.js","sourceRoot":"","sources":["../../../../src/components/ui/tooltip/sc-tooltip.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, h, Prop, State, Element, Listen, Watch } from '@stencil/core';\n\n/**\n * @part base - The elements base wrapper.\n * @part text - The tooltip text.\n */\n@Component({\n  tag: 'sc-tooltip',\n  styleUrl: 'sc-tooltip.scss',\n  shadow: true,\n})\nexport class ScTooltip {\n  @Element() el: HTMLScTooltipElement;\n  private tooltip: HTMLDivElement;\n\n  /** Open or not */\n  @Prop({ mutable: true }) open: boolean;\n\n  /** Tooltip fixed width */\n  @Prop() width: string;\n\n  /** Tooltip text */\n  @Prop() text: string;\n\n  /** Freeze open or closed. */\n  @Prop() freeze: boolean;\n\n  /** The tooltip's padding. */\n  @Prop() padding: number = 5;\n\n  /** The tooltip's type. */\n  @Prop({ reflect: true }) type: 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' = 'info';\n\n  @State() top: number = -10000;\n  @State() left: number = -10000;\n\n  componentDidLoad() {\n    this.handleWindowScroll();\n  }\n\n  @Listen('scroll', { target: 'window' })\n  @Listen('resize', { target: 'window' })\n  handleWindowScroll() {\n    if (!this.open) return;\n    if (!this.tooltip) return;\n\n    var linkProps = this.tooltip.getBoundingClientRect();\n    var tooltipProps = this.el.getBoundingClientRect();\n\n    this.top = tooltipProps.top - (linkProps.height + this.padding);\n    const min = Math.max(tooltipProps.left + tooltipProps.width / 2 - linkProps.width / 2 + this.padding, 0);\n    this.left = Math.min(min, window.innerWidth - linkProps.width);\n  }\n\n  @Watch('open')\n  handleOpenChange() {\n    setTimeout(() => this.handleWindowScroll(), 0);\n  }\n\n  handleBlur() {\n    if (this.freeze) return;\n    this.open = false;\n  }\n  handleClick() {\n    if (this.freeze) return;\n    this.open = true;\n  }\n  handleFocus() {\n    if (this.freeze) return;\n    this.open = true;\n  }\n  handleMouseOver() {\n    if (this.freeze) return;\n    this.open = true;\n  }\n  handleMouseOut() {\n    if (this.freeze) return;\n    this.open = false;\n  }\n\n  render() {\n    if (!this.text) {\n      return <slot />;\n    }\n\n    return (\n      <span\n        part=\"base\"\n        class={{\n          'tooltip': true,\n          // Types\n          'tooltip--primary': this.type === 'primary',\n          'tooltip--success': this.type === 'success',\n          'tooltip--info': this.type === 'info',\n          'tooltip--warning': this.type === 'warning',\n          'tooltip--danger': this.type === 'danger',\n          'tooltip--has-width': !!this.width,\n        }}\n        onClick={() => this.handleClick()}\n        onBlur={() => this.handleBlur()}\n        onFocus={() => this.handleFocus()}\n        onMouseOver={() => this.handleMouseOver()}\n        onMouseOut={() => this.handleMouseOut()}\n      >\n        <slot></slot>\n        {!!this.open && (\n          <div\n            part=\"text\"\n            ref={el => (this.tooltip = el as HTMLDivElement)}\n            class=\"tooltip-text\"\n            style={{\n              top: `${this.top}px`,\n              left: `${this.left}px`,\n              ...(this.width ? { '--sc-tooltip-width': this.width } : {}),\n            }}\n          >\n            {this.text}\n          </div>\n        )}\n      </span>\n    );\n  }\n}\n"]}