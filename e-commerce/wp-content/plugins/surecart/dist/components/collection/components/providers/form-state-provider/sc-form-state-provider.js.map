{"version":3,"file":"sc-form-state-provider.js","sourceRoot":"","sources":["../../../../src/components/providers/form-state-provider/sc-form-state-provider.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,EAAgB,MAAM,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACxF,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,EAAE,EAAE,MAAM,iBAAiB,CAAC;AAErC,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAExD;;GAEG;AAKH,MAAM,OAAO,mBAAmB;;QAC9B,sCAAsC;QAC9B,kBAAa,GAAG,SAAS,CAAC,eAAe,CAAC,CAAC;6BAG1B,eAAe,CAAC,YAAY;;IAKrD,qBAAqB;IACrB,QAAQ,CAAC,IAAI;QACX,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC;QACpC,eAAe,CAAC,IAAI,CAAC,CAAC;QACtB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,8DAA8D;IAE9D,yBAAyB,CAAC,KAAK;QAC7B,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,8BAA8B;IAC9B,iBAAiB;QACf,uBAAuB;QACvB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,CAAC,CAAC;QACpE,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IAED,0CAA0C;IAC1C,oBAAoB;QAClB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED,4CAA4C;IAE5C,mBAAmB,CAAC,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAyB,CAAC,CAAC;IAC7C,CAAC;IAED,+CAA+C;IAE/C,KAAK,CAAC,UAAU;QACd,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC;IAED,MAAM;QACJ,kBAAkB;QAClB,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,KAAK,SAAS,EAAE,CAAC;YAC3C,OAAO,CACL;gBACE,eAAM,EAAE,CAAC,0BAA0B,EAAE,UAAU,CAAC,CAAO,CAC3C,CACf,CAAC;QACJ,CAAC;QAED,OAAO,eAAQ,CAAC;IAClB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, State, Event, EventEmitter, Listen, Watch } from '@stencil/core';\nimport { checkoutMachine } from './checkout-machine';\nimport { interpret } from '@xstate/fsm';\nimport { __ } from '@wordpress/i18n';\nimport { FormState, FormStateSetter } from '../../../types';\nimport { updateFormState } from '@store/form/mutations';\n\n/**\n * This component listens for a confirmed event and redirects to the success url.\n */\n@Component({\n  tag: 'sc-form-state-provider',\n  shadow: true,\n})\nexport class ScFormStateProvider {\n  /** Holds our state machine service */\n  private _stateService = interpret(checkoutMachine);\n\n  /** Loading states for different parts of the form. */\n  @State() checkoutState = checkoutMachine.initialState;\n\n  /** Set the state. */\n  @Event() scSetCheckoutFormState: EventEmitter<FormState>;\n\n  /** Set the state. */\n  setState(name) {\n    const { send } = this._stateService;\n    updateFormState(name);\n    return send(name);\n  }\n\n  /** Watch for checkout state changes and emit to listeners. */\n  @Watch('checkoutState')\n  handleCheckoutStateChange(state) {\n    this.scSetCheckoutFormState.emit(state.value);\n  }\n\n  /** Init the state service. */\n  componentWillLoad() {\n    // Start state machine.\n    this._stateService.subscribe(state => (this.checkoutState = state));\n    this._stateService.start();\n  }\n\n  /** Remove state machine on disconnect. */\n  disconnectedCallback() {\n    this._stateService.stop();\n  }\n\n  /** Allow children to set the form state. */\n  @Listen('scSetState')\n  handleSetStateEvent(e) {\n    this.setState(e.detail as FormStateSetter);\n  }\n\n  /** Update the state when the order is paid. */\n  @Listen('scPaid')\n  async handlePaid() {\n    this.setState('PAID');\n  }\n\n  render() {\n    // handle expired.\n    if (this.checkoutState.value === 'expired') {\n      return (\n        <sc-block-ui>\n          <div>{__('Please refresh the page.', 'surecart')}</div>\n        </sc-block-ui>\n      );\n    }\n\n    return <slot />;\n  }\n}\n"]}