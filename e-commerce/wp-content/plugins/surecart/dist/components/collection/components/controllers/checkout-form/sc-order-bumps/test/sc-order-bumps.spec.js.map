{"version":3,"file":"sc-order-bumps.spec.js","sourceRoot":"","sources":["../../../../../../src/components/controllers/checkout-form/sc-order-bumps/test/sc-order-bumps.spec.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD,OAAO,EAAE,OAAO,IAAI,eAAe,EAAE,KAAK,IAAI,aAAa,EAAE,MAAM,iBAAiB,CAAC;AACrF,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAEjD,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,UAAU,CAAC,GAAG,EAAE;QACd,eAAe,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,QAAQ,EAAE,GAAG,EAAE,CAAC,yBAAiC;SAClD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,KAAK,IAAI,EAAE;QACrC,aAAa,CAAC,QAAQ,GAAG;YACvB,EAAE,EAAE,MAAM;YACV,iBAAiB,EAAE;gBACjB,IAAI,EAAE;oBACJ;wBACE,IAAI,EAAE,MAAM;wBACZ,UAAU,EAAE,GAAG;wBACf,KAAK,EAAE;4BACL,MAAM,EAAE,GAAG;4BACX,QAAQ,EAAE,KAAK;4BACf,OAAO,EAAE;gCACP,EAAE,EAAE,MAAM;gCACV,IAAI,EAAE,MAAM;gCACZ,WAAW,EAAE,MAAM;gCACnB,QAAQ,EAAE;oCACR,UAAU,EAAE;wCACV,KAAK,EAAE,CAAC;qCACT;iCACF;6BACS;yBACb;qBACF;iBACQ;aACZ;SACU,CAAC;QACd,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,QAAQ,EAAE,GAAG,EAAE,CAAC,yBAAiC;SAClD,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,aAAa,CAAC,QAAQ,GAAG;YACvB,EAAE,EAAE,MAAM;YACV,iBAAiB,EAAE;gBACjB,IAAI,EAAE;oBACJ;wBACE,IAAI,EAAE,MAAM;wBACZ,UAAU,EAAE,GAAG;wBACf,KAAK,EAAE;4BACL,MAAM,EAAE,GAAG;4BACX,QAAQ,EAAE,KAAK;4BACf,OAAO,EAAE;gCACP,EAAE,EAAE,MAAM;gCACV,IAAI,EAAE,MAAM;gCACZ,WAAW,EAAE,MAAM;gCACnB,QAAQ,EAAE;oCACR,UAAU,EAAE;wCACV,KAAK,EAAE,CAAC;qCACT;iCACF;6BACS;yBACb;qBACF;iBACQ;aACZ;SACU,CAAC;QACd,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,YAAY,CAAC;YAC1B,QAAQ,EAAE,GAAG,EAAE,CAAC,sBAAgB,KAAK,EAAC,QAAQ,GAAkB;SACjE,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { h } from '@stencil/core';\nimport { newSpecPage } from '@stencil/core/testing';\nimport { Bump, Checkout, Product } from '../../../../../types';\nimport { dispose as disposeCheckout, state as checkoutState } from '@store/checkout';\nimport { ScOrderBumps } from '../sc-order-bumps';\n\ndescribe('sc-order-bump', () => {\n  beforeEach(() => {\n    disposeCheckout();\n  });\n\n  it('renders empty if no bumps', async () => {\n    const page = await newSpecPage({\n      components: [ScOrderBumps],\n      template: () => <sc-order-bumps></sc-order-bumps>,\n    });\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('renders default label', async () => {\n    checkoutState.checkout = {\n      id: 'test',\n      recommended_bumps: {\n        data: [\n          {\n            name: 'Test',\n            amount_off: 123,\n            price: {\n              amount: 123,\n              currency: 'USD',\n              product: {\n                id: 'test',\n                name: 'Test',\n                description: 'Test',\n                variants: {\n                  pagination: {\n                    count: 0,\n                  },\n                },\n              } as Product,\n            },\n          },\n        ] as Bump[],\n      },\n    } as Checkout;\n    const page = await newSpecPage({\n      components: [ScOrderBumps],\n      template: () => <sc-order-bumps></sc-order-bumps>,\n    });\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('renders custom label', async () => {\n    checkoutState.checkout = {\n      id: 'test',\n      recommended_bumps: {\n        data: [\n          {\n            name: 'Test',\n            amount_off: 123,\n            price: {\n              amount: 123,\n              currency: 'USD',\n              product: {\n                id: 'test',\n                name: 'Test',\n                description: 'Test',\n                variants: {\n                  pagination: {\n                    count: 0,\n                  },\n                },\n              } as Product,\n            },\n          },\n        ] as Bump[],\n      },\n    } as Checkout;\n    const page = await newSpecPage({\n      components: [ScOrderBumps],\n      template: () => <sc-order-bumps label=\"custom\"></sc-order-bumps>,\n    });\n    expect(page.root).toMatchSnapshot();\n  });\n});\n"]}