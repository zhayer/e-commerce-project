{"version":3,"file":"conditional-functions.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/sc-conditional-form/conditional-functions.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArrayOperators, Checkout, NumberOperators, Product, Rule, RuleGroup } from '../../../../types';\n\n/**\n * Check if any of the rule groups is passed or not.\n *\n * @param {array} groups Rule groups.\n * @param {object} props Data.\n * @returns {boolean}\n */\nexport const hasAnyRuleGroupPassed = (groups: RuleGroup[], props: { checkout: Checkout; processor: string }) => {\n  return (groups || []).some(({ rules }) => hasRulesPassed(rules, props));\n};\n\n/**\n * CHeck if all rules are passed or not.\n *\n * @param {array} rules Rules.\n * @param {object} props Data.\n * @returns {boolean}\n */\nexport const hasRulesPassed = (rules: Rule[], { checkout, processor }) => {\n  return rules\n    .map(rule => {\n      const ruleValue = Array.isArray(rule?.value) ? (rule?.value).map(ruleValue => ruleValue?.value || ruleValue) : rule?.value;\n      switch (rule?.condition) {\n        case 'total':\n          return compareNumberValues(parseFloat(checkout.total_amount), parseFloat(ruleValue as string), rule?.operator as NumberOperators);\n        case 'products':\n          return compareObjectValues(getCartProductIds(checkout), ruleValue as string[], rule?.operator as ArrayOperators);\n        case 'coupons':\n          return compareObjectValues(getCartCouponIds(checkout), ruleValue as string[], rule?.operator as ArrayOperators);\n        case 'shipping_country':\n          return compareObjectValues([checkout?.shipping_address?.country], ruleValue as string[], rule?.operator as ArrayOperators);\n        case 'billing_country':\n          return compareObjectValues([checkout?.billing_address?.country], ruleValue as string[], rule?.operator as ArrayOperators);\n        case 'processors':\n          return compareObjectValues([processor], ruleValue as string[], rule?.operator as ArrayOperators);\n        default:\n          return false;\n      }\n    })\n    .every(rules => rules);\n};\n\n/**\n * Get array of products from checkout.\n *\n * @param {object} checkout CHeckout data.\n * @returns {array}\n */\nexport const getCartProductIds = (checkout: Checkout) => {\n  return (checkout?.line_items?.data || []).map(({ price }) => (price?.product as Product)?.id);\n};\n\n/**\n * Get array of coupons from checkout.\n *\n * @param {object} checkout CHeckout data.\n * @returns {array}\n */\nexport const getCartCouponIds = (checkout: Checkout) => {\n  return checkout?.discount?.coupon?.id ? [checkout?.discount?.coupon?.id] : [];\n};\n\n/**\n * Compare object values.\n *\n * @param {array} cart_values order values.\n * @param {array} rule_values rules values.\n * @param {string} operator rule operator.\n * @returns {boolean}\n */\n\nexport const compareObjectValues = (cart_values: string[], rule_values: string[], operator: 'all' | 'any' | 'none' | 'exist' | 'not_exist') => {\n  switch (operator) {\n    case 'all':\n      return rule_values.filter(n1 => cart_values.some(n2 => n1 == n2)).length === rule_values.length;\n    case 'any':\n      return cart_values.filter(n1 => rule_values.some(n2 => n1 == n2)).length >= 1;\n    case 'none':\n      return cart_values.filter(n1 => rule_values.some(n2 => n1 == n2)).length === 0;\n    case 'exist':\n      return cart_values.length >= 1;\n    case 'not_exist':\n      return cart_values.length === 0;\n    default:\n      return false;\n  }\n};\n\n/**\n * Compare string values.\n *\n * @param string number1 The actual number from cart/order.\n * @param array  number2 Rule values.\n * @param string operator Rule operator.\n * @returns {boolean}\n */\nexport const compareNumberValues = (number1: number, number2: number, operator: string) => {\n  switch (operator) {\n    case '==':\n      return number1 === number2;\n    case '!=':\n      return number1 !== number2;\n    case '>':\n      return number1 > number2;\n    case '<':\n      return number1 < number2;\n    case '<=':\n      return number1 <= number2;\n    case '>=':\n      return number1 >= number2;\n  }\n\n  return false;\n};\n"]}