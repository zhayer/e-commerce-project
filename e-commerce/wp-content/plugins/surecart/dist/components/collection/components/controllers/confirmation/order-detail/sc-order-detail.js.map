{"version":3,"file":"sc-order-detail.js","sourceRoot":"","sources":["../../../../../src/components/controllers/confirmation/order-detail/sc-order-detail.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Checkout } from '../../../../types';\nimport { Component, h, Prop } from '@stencil/core';\nimport dotProp from 'dot-prop-immutable';\nimport { openWormhole } from 'stencil-wormhole';\n\n@Component({\n  tag: 'sc-order-detail',\n  styleUrl: 'sc-order-detail.scss',\n  shadow: true,\n})\nexport class ScSessionDetail {\n  @Prop() order: Checkout;\n  @Prop() value: string;\n  @Prop() fallback: string;\n  @Prop() metaKey: string;\n  @Prop() loading: boolean;\n  @Prop() label: string;\n\n  getPropByPath(object, path, defaultValue) {\n    if (object && path.length) return this.getPropByPath(object[path.shift()], path, defaultValue);\n    return object === undefined ? defaultValue : object;\n  }\n\n  getValue() {\n    if (!this.value) {\n      return;\n    }\n\n    let value = '';\n\n    // get metadata value\n    if (this.value === 'metadata') {\n      return dotProp.get(this?.order?.metadata, this.value || '');\n    }\n\n    // get value\n    value = dotProp.get(this?.order, this.value || '');\n\n    // if number, format it\n    if (typeof value === 'number') {\n      value = <sc-format-number type=\"currency\" currency={this?.order?.currency} value={value}></sc-format-number>;\n    }\n\n    return value;\n  }\n\n  render() {\n    if (this.loading) {\n      return (\n        <div\n          part=\"base\"\n          class={{\n            'order-detail': true,\n          }}\n        >\n          <span part=\"label\" class=\"order-detail__label\">\n            <sc-skeleton style={{ width: '60px', height: '8px', display: 'inline-block' }}></sc-skeleton>\n          </span>\n          <span part=\"value\" class=\"order-detail__value\">\n            <sc-skeleton style={{ width: '120px', display: 'inline-block' }}></sc-skeleton>\n          </span>\n        </div>\n      );\n    }\n\n    const value = this.getValue();\n    if (!value) {\n      if (!this.fallback) {\n        return;\n      }\n    }\n\n    return (\n      <div\n        part=\"base\"\n        class={{\n          'order-detail': true,\n        }}\n      >\n        <span part=\"label\" class=\"order-detail__label\">\n          <slot name=\"label\">{this.label}</slot>\n        </span>\n        <span part=\"value\" class=\"order-detail__value\">\n          <slot name=\"value\">{value || this.fallback}</slot>\n        </span>\n      </div>\n    );\n  }\n}\n\nopenWormhole(ScSessionDetail, ['order', 'loading'], false);\n"]}