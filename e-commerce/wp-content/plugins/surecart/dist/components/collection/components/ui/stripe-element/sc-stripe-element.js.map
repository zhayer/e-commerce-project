{"version":3,"file":"sc-stripe-element.js","sourceRoot":"","sources":["../../../../src/components/ui/stripe-element/sc-stripe-element.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, Fragment, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { loadStripe } from '@stripe/stripe-js/pure';\nimport { __ } from '@wordpress/i18n';\nimport { openWormhole } from 'stencil-wormhole';\nimport { state as selectedProcessor } from '@store/selected-processor';\n\nimport { Checkout, FormState, FormStateSetter, PaymentInfoAddedParams, ProcessorName } from '../../../types';\nimport { availableProcessors } from '@store/processors/getters';\nimport { StripeElementChangeEvent } from '@stripe/stripe-js';\nimport { createErrorNotice } from '@store/notices/mutations';\nimport { updateFormState } from '@store/form/mutations';\n\n@Component({\n  tag: 'sc-stripe-element',\n  styleUrl: 'sc-stripe-element.scss',\n  shadow: false,\n})\nexport class ScStripeElement {\n  @Element() el: HTMLElement;\n  private container: HTMLDivElement;\n  private stripe: any;\n  private elements: any;\n  private element: any;\n\n  /** Whether this field is disabled */\n  @Prop() disabled: boolean;\n\n  /** The checkout session object for finalizing intents */\n  @Prop() order: Checkout;\n\n  /** Mode for the payment */\n  @Prop() mode: 'live' | 'test' = 'live';\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's label. Alternatively, you can use the label slot. */\n  @Prop() label: string;\n\n  /** The input's help text. Alternatively, you can use the help-text slot. */\n  @Prop() secureText: string = '';\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  /** The selected processor id */\n  @Prop() selectedProcessorId: ProcessorName;\n\n  /** The form state */\n  @Prop() formState: FormState;\n\n  /** The order/invoice was paid for */\n  @Event() scPaid: EventEmitter<void>;\n  /** Set the state */\n  @Event() scSetState: EventEmitter<FormStateSetter>;\n\n  /** Payment information was added */\n  @Event() scPaymentInfoAdded: EventEmitter<PaymentInfoAddedParams>;\n\n  @State() error: string;\n  @State() confirming: boolean;\n\n  async componentWillLoad() {\n    const processor = (availableProcessors() || []).find(processor => processor.processor_type === 'stripe');\n    if (!processor) {\n      return;\n    }\n    const { account_id, publishable_key } = processor?.processor_data || {};\n    try {\n      this.stripe = await loadStripe(publishable_key, { stripeAccount: account_id });\n      this.elements = this.stripe.elements();\n    } catch (e) {\n      this.error = e?.message || __('Stripe could not be loaded', 'surecart');\n    }\n  }\n\n  /**\n   * Watch order status and maybe confirm the order.\n   */\n  @Watch('formState')\n  async maybeConfirmOrder(val: FormState) {\n    // must be paying\n    if (val !== 'paying') return;\n    // this processor is not selected.\n    if (selectedProcessor?.id !== 'stripe') return;\n    // must be a stripe session\n    if (this.order?.payment_intent?.processor_type !== 'stripe') return;\n    // must have an external intent id\n    if (!this.order?.payment_intent?.external_intent_id) return;\n    // must have a secret\n    if (!this.order?.payment_intent?.processor_data?.stripe?.client_secret) return;\n    // need an external_type\n    if (!this.order?.payment_intent?.processor_data?.stripe?.type) return;\n    // prevent possible double-charges\n    if (this.confirming) return;\n\n    this.confirming = true;\n    try {\n      let response;\n      if (this.order?.payment_intent?.processor_data?.stripe?.type == 'setup') {\n        response = await this.confirmCardSetup(this.order?.payment_intent?.processor_data?.stripe.client_secret);\n      } else {\n        response = await this.confirmCardPayment(this.order?.payment_intent?.processor_data?.stripe?.client_secret);\n      }\n      if (response?.error) {\n        this.error = response.error.message;\n        throw response.error;\n      }\n\n      this.scSetState.emit('PAID');\n      // paid\n      this.scPaid.emit();\n    } catch (e) {\n      updateFormState('REJECT');\n      createErrorNotice(e);\n      if (e.message) {\n        this.error = e.message;\n      }\n      this.confirming = false;\n      this.scSetState.emit('REJECT');\n    }\n  }\n\n  /** Confirm card payment */\n  @Method('confirmPayment')\n  async confirmCardPayment(secret) {\n    return this.stripe.confirmCardPayment(secret, {\n      payment_method: {\n        card: this.element,\n        billing_details: {\n          ...(this?.order?.name ? { name: this.order.name } : {}),\n          ...(this?.order?.email ? { email: this.order.email } : {}),\n        },\n      },\n    });\n  }\n\n  /** Confirm card setup. */\n  @Method('confirmSetup')\n  async confirmCardSetup(secret) {\n    return this.stripe.confirmCardSetup(secret, {\n      payment_method: {\n        card: this.element,\n        billing_details: {\n          ...(this?.order?.name ? { name: this.order.name } : {}),\n          ...(this?.order?.email ? { email: this.order.email } : {}),\n        },\n      },\n    });\n  }\n\n  componentDidLoad() {\n    if (!this.elements) {\n      return;\n    }\n    // get the computed styles.\n    const styles = getComputedStyle(document.body);\n\n    this.elements\n      .create('card', {\n        style: {\n          base: {\n            'color': styles.getPropertyValue('--sc-input-label-color'),\n            'fontSize': '16px',\n            'iconColor': styles.getPropertyValue('--sc-stripe-icon-color'),\n            'fontSmoothing': 'antialiased',\n            '::placeholder': {\n              color: styles.getPropertyValue('--sc-input-placeholder-color'),\n            },\n          },\n          invalid: {\n            'color': styles.getPropertyValue('--sc-color-error-500'),\n            ':focus': {\n              color: styles.getPropertyValue('--sc-input-label-color'),\n            },\n          },\n        },\n      })\n      .mount(this.container);\n\n    this.element = this.elements.getElement('card');\n\n    this.element.on('change', (event: StripeElementChangeEvent) => {\n      if (event.complete) {\n        this.scPaymentInfoAdded.emit({\n          processor_type: 'stripe',\n          checkout_id: this.order.id,\n          currency: this.order.currency,\n          total_amount: this.order.total_amount,\n          line_items: this.order.line_items,\n          payment_method: {\n            billing_details: {\n              name: this?.order?.name ? this.order.name : '',\n              email: this?.order?.email ? this.order.email : '',\n            },\n          },\n        });\n      }\n\n      this.error = event?.error?.message ? event.error.message : '';\n    });\n    this.element.on('focus', () => (this.hasFocus = true));\n    this.element.on('blur', () => (this.hasFocus = false));\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <sc-form-control class=\"sc-stripe\" size={this.size} label={this.label}>\n          <div class=\"sc-stripe-element\" ref={el => (this.container = el as HTMLDivElement)}></div>\n        </sc-form-control>\n        {this.error && (\n          <sc-text\n            style={{\n              'color': 'var(--sc-color-danger-500)',\n              '--font-size': 'var(--sc-font-size-small)',\n              'marginTop': '0.5em',\n            }}\n          >\n            {this.error}\n          </sc-text>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nopenWormhole(ScStripeElement, ['order', 'mode', 'selectedProcessorId', 'formState'], false);\n"]}