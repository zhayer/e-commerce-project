{"version":3,"file":"sc-breadcrumbs.js","sourceRoot":"","sources":["../../../../src/components/ui/breadcrumbs/sc-breadcrumbs.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAEtE;;;GAGG;AAMH,MAAM,OAAO,aAAa;;qBAMR,YAAY;;IAE5B,6EAA6E;IACrE,YAAY;QAClB,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,sBAAsB,CAAoB,CAAC;QAC5F,MAAM,SAAS,GAAG,OAAO,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAgB,CAAC;QAEhF,oCAAoC;QACpC,MAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAgB,CAAC;QAEvD,CAAC,KAAK,EAAE,GAAG,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;QACnF,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC;QAEzB,OAAO,KAAK,CAAC;IACf,CAAC;IAED,gBAAgB;QACd,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,kBAAkB,CAAoB,CAAC;QACxF,MAAM,KAAK,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;YACrD,OAAO,IAAI,CAAC,QAAQ,KAAK,eAAe,CAAC;QAC3C,CAAC,CAA8B,CAAC;QAEhC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC5B,gEAAgE;YAChE,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;YAC3D,IAAI,SAAS,KAAK,IAAI,EAAE,CAAC;gBACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;YACnC,CAAC;YAED,iDAAiD;YACjD,IAAI,KAAK,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC/B,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;YAC5C,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;YACvC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,OAAO,CACL,EAAC,QAAQ;YACP,4DAAK,IAAI,EAAC,MAAM,EAAC,KAAK,EAAC,YAAY,gBAAa,IAAI,CAAC,KAAK;gBACxD,6DAAM,YAAY,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAS,CACtD;YACN,4DAAK,IAAI,EAAC,WAAW,EAAC,MAAM,uBAAa,MAAM;gBAC7C,6DAAM,IAAI,EAAC,WAAW;oBACpB,gEAAS,IAAI,EAAC,eAAe,GAAW,CACnC,CACH,CACG,CACZ,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Fragment, Prop, Element } from '@stencil/core';\n\n/**\n * @part base - The elements base wrapper.\n * @part separator - The separator.\n */\n@Component({\n  tag: 'sc-breadcrumbs',\n  styleUrl: 'sc-breadcrumbs.css',\n  shadow: true,\n})\nexport class ScBreadcrumbs {\n  @Element() el: HTMLElement;\n  /**\n   * The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and\n   * other assistive devices.\n   */\n  @Prop() label = 'Breadcrumb';\n\n  // Generates a clone of the separator element to use for each breadcrumb item\n  private getSeparator() {\n    const slotted = this.el.shadowRoot.querySelector('slot[name=separator]') as HTMLSlotElement;\n    const separator = slotted.assignedElements({ flatten: true })[0] as HTMLElement;\n\n    // Clone it, remove ids, and slot it\n    const clone = separator.cloneNode(true) as HTMLElement;\n\n    [clone, ...clone.querySelectorAll('[id]')].forEach(el => el.removeAttribute('id'));\n    clone.slot = 'separator';\n\n    return clone;\n  }\n\n  handleSlotChange() {\n    const slotted = this.el.shadowRoot.querySelector('.breadcrumb slot') as HTMLSlotElement;\n    const items = slotted.assignedElements().filter(node => {\n      return node.nodeName === 'CE-BREADCRUMB';\n    }) as HTMLScBreadcrumbElement[];\n\n    items.forEach((item, index) => {\n      // Append separators to each item if they don't already have one\n      const separator = item.querySelector('[slot=\"separator\"]');\n      if (separator === null) {\n        item.append(this.getSeparator());\n      }\n\n      // The last breadcrumb item is the \"current page\"\n      if (index === items.length - 1) {\n        item.setAttribute('aria-current', 'page');\n      } else {\n        item.removeAttribute('aria-current');\n      }\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <nav part=\"base\" class=\"breadcrumb\" aria-label={this.label}>\n          <slot onSlotchange={() => this.handleSlotChange()}></slot>\n        </nav>\n        <div part=\"separator\" hidden aria-hidden=\"true\">\n          <slot name=\"separator\">\n            <sc-icon name=\"chevron-right\"></sc-icon>\n          </slot>\n        </div>\n      </Fragment>\n    );\n  }\n}\n"]}