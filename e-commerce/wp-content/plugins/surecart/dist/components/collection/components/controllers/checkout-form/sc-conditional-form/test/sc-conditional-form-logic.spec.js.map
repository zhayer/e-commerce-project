{"version":3,"file":"sc-conditional-form-logic.spec.js","sourceRoot":"","sources":["../../../../../../src/components/controllers/checkout-form/sc-conditional-form/test/sc-conditional-form-logic.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Checkout } from '../../../../../types';\nimport { hasAnyRuleGroupPassed, compareNumberValues, compareObjectValues, hasRulesPassed } from '../conditional-functions';\n\ndescribe('Conditional form logic', () => {\n  describe('hasAnyRuleGroupPassed', () => {\n    it('Test Rule groups', () => {\n      let result = hasAnyRuleGroupPassed(\n        [\n          {\n            group_id: 'asdf',\n            rules: [{ condition: 'total', operator: '==', value: '10000' }],\n          },\n        ],\n        {\n          checkout: {\n            total_amount: 10000,\n          } as Checkout,\n          processor: 'stripe',\n        },\n      );\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('hasRulesPassed', () => {\n    it('Order total and processor', () => {\n      expect(\n        hasRulesPassed(\n          [\n            { condition: 'total', operator: '==', value: '10000' },\n            { condition: 'processors', operator: 'any', value: ['test_processor_id'] },\n          ],\n          {\n            checkout: {\n              total_amount: 10000,\n            },\n            processor: 'test_processor_id',\n          },\n        ),\n      ).toBe(true);\n      expect(\n        hasRulesPassed(\n          [\n            { condition: 'total', operator: '==', value: '10000' },\n            { condition: 'processors', operator: 'any', value: ['test_processor_id'] },\n          ],\n          {\n            checkout: {\n              total_amount: 10001,\n            },\n            processor: 'test_processor_id',\n          },\n        ),\n      ).toBe(false);\n      expect(\n        hasRulesPassed(\n          [\n            { condition: 'total', operator: '==', value: '10000' },\n            { condition: 'processors', operator: 'any', value: ['test_processor_id'] },\n          ],\n          {\n            checkout: {\n              total_amount: 10000,\n            },\n            processor: 'test_processor_id1',\n          },\n        ),\n      ).toBe(false);\n    });\n  });\n\n  describe('compareNumberValues', () => {\n    let rule_order_value = 100;\n\n    it('Order total is less than 100', () => {\n      const rule_group = {\n        condition: 'total',\n        operator: '<',\n        value: '100',\n      };\n      let result = compareNumberValues(90, parseFloat(rule_group.value), rule_group.operator);\n      expect(result).toBe(true);\n    });\n\n    it('Order total is greater than 100', () => {\n      let result = compareNumberValues(120, rule_order_value, '>');\n      expect(result).toBe(true);\n    });\n\n    it('Order total is equal to 100', () => {\n      let result = compareNumberValues(100, rule_order_value, '==');\n      expect(result).toBe(true);\n    });\n  });\n\n  describe('compareObjectValues', () => {\n    const rule_group = {\n      condition: 'products',\n      operator: 'any',\n      value: ['c08275a8-4a1a-4e69-a488-e508f92e9dac', '5aaf576f-6bcb-49cd-8c4c-f2ef264f03d8'],\n    };\n\n    describe('Products', () => {\n      it('Cart contains any of the product', () => {\n        expect(compareObjectValues(['c08275a8-4a1a-4e69-a488-e508f92e9dac'], rule_group.value, 'any')).toBe(true);\n      });\n\n      it('Cart contains all of the product', () => {\n        expect(compareObjectValues(['c08275a8-4a1a-4e69-a488-e508f92e9dac', '5aaf576f-6bcb-49cd-8c4c-f2ef264f03d8'], rule_group.value, 'all')).toBe(true);\n      });\n\n      it('Cart contains none of the product', () => {\n        expect(compareObjectValues(['c08275a8-4a1a-4e69-a488-e508f92e9daq'], rule_group.value, 'none')).toBe(true);\n      });\n    });\n\n    describe('Coupons', () => {\n      const rule_group = {\n        condition: 'coupons',\n        operator: 'any',\n        value: ['c638aa78-5b51-4d4f-a96a-bf1a462db6c5', '93363978-1ba8-4d87-9108-68d90825b386'],\n      };\n\n      it('Cart contains any of the coupon', () => {\n        expect(compareObjectValues(['c638aa78-5b51-4d4f-a96a-bf1a462db6c5'], rule_group.value, 'any')).toBe(true);\n      });\n\n      it('Cart contains all of the coupons', () => {\n        expect(compareObjectValues(['c638aa78-5b51-4d4f-a96a-bf1a462db6c5', '93363978-1ba8-4d87-9108-68d90825b386'], rule_group.value, 'all')).toBe(true);\n      });\n\n      it('Cart contains none of the coupon', () => {\n        expect(compareObjectValues(['c08275a8-4a1a-4e69-a488-e508f92e9daq'], rule_group.value, 'none')).toBe(true);\n      });\n\n      it('Cart - coupon exists', () => {\n        expect(compareObjectValues(['c08275a8-4a1a-4e69-a488-e508f92e9daq'], rule_group.value, 'exist')).toBe(true);\n        expect(compareObjectValues([], rule_group.value, 'exist')).toBe(false);\n      });\n\n      it('Cart - coupon not exist', () => {\n        expect(compareObjectValues(['asdf'], rule_group.value, 'not_exist')).toBe(false);\n        expect(compareObjectValues([], rule_group.value, 'not_exist')).toBe(true);\n      });\n    });\n\n    describe('Shipping & Billing Country', () => {\n      const rule_group = {\n        condition: 'billing_country',\n        operator: 'any',\n        value: ['IN'],\n      };\n\n      it('Cart contains any of the country', () => {\n        let result = compareObjectValues(['IN'], rule_group.value, 'any');\n        expect(result).toBe(true);\n      });\n\n      it('Cart contains none of the country', () => {\n        let result = compareObjectValues(['US'], rule_group.value, 'none');\n        expect(result).toBe(true);\n      });\n    });\n\n    describe('Payment Processor', () => {\n      const rule_group = {\n        condition: 'processors',\n        operator: 'any',\n        value: ['stripe'],\n      };\n      it('Selected payment for cart - any', () => {\n        expect(compareObjectValues(['stripe'], rule_group.value, 'any')).toBe(true);\n      });\n\n      it('Selected payment for cart - none', () => {\n        expect(compareObjectValues(['paypal'], rule_group.value, 'none')).toBe(true);\n      });\n    });\n  });\n});\n"]}