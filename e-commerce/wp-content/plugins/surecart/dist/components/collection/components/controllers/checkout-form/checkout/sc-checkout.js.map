{"version":3,"file":"sc-checkout.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/checkout/sc-checkout.tsx"],"names":[],"mappings":"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":["import { Component, Element, Event, EventEmitter, h, Listen, Method, Prop, State } from '@stencil/core';\nimport { state as checkoutState } from '@store/checkout';\nimport { state as formState } from '@store/form';\nimport { state as userState } from '@store/user';\nimport { state as processorsState } from '@store/processors';\nimport { __ } from '@wordpress/i18n';\nimport { Creator, Universe } from 'stencil-wormhole';\n\nimport {\n  Bump,\n  Checkout,\n  Customer,\n  FormState,\n  ManualPaymentMethod,\n  PaymentIntents,\n  PriceChoice,\n  Prices,\n  Processor,\n  ProcessorName,\n  Product,\n  Products,\n  ResponseError,\n  TaxProtocol,\n} from '../../../../types';\n\n@Component({\n  tag: 'sc-checkout',\n  styleUrl: 'sc-checkout.scss',\n  shadow: false,\n})\nexport class ScCheckout {\n  /** Element */\n  @Element() el: HTMLElement;\n\n  /** Holds the session provider reference. */\n  private sessionProvider: HTMLScSessionProviderElement;\n\n  /** An array of prices to pre-fill in the form. */\n  @Prop() prices: Array<PriceChoice> = [];\n\n  /** A product to pre-fill the form. */\n  @Prop() product: Product;\n\n  /** Are we in test or live mode. */\n  @Prop() mode: 'test' | 'live' = 'live';\n\n  /** The checkout form id */\n  @Prop() formId: number;\n\n  /** When the form was modified. */\n  @Prop() modified: string;\n\n  /** Currency to use for this checkout. */\n  @Prop() currencyCode: string = 'usd';\n\n  /** Whether to persist the session in the browser between visits. */\n  @Prop() persistSession: boolean = true;\n\n  /** Where to go on success */\n  @Prop() successUrl: string = '';\n\n  /** Stores the current customer */\n  @Prop({ mutable: true }) customer: Customer;\n\n  /** Alignment */\n  @Prop() alignment: 'center' | 'wide' | 'full';\n\n  /** The account tax protocol */\n  @Prop() taxProtocol: TaxProtocol;\n\n  /** Should we disable components validation */\n  @Prop() disableComponentsValidation: boolean;\n\n  /** Processors enabled for this form. */\n  @Prop({ mutable: true }) processors: Processor[];\n\n  /** Manual payment methods enabled for this form. */\n  @Prop() manualPaymentMethods: ManualPaymentMethod[];\n\n  /** Can we edit line items? */\n  @Prop() editLineItems: boolean = true;\n\n  /** Can we remove line items? */\n  @Prop() removeLineItems: boolean = true;\n\n  /** Is abandoned checkout enabled. */\n  @Prop() abandonedCheckoutEnabled: boolean;\n\n  /** Use the Stripe payment element. */\n  @Prop() stripePaymentElement: boolean = false;\n\n  /** Stores fetched prices for use throughout component.  */\n  @State() pricesEntities: Prices = {};\n\n  /** Stores fetched products for use throughout component.  */\n  @State() productsEntities: Products = {};\n\n  /** Loading states for different parts of the form. */\n  @State() checkoutState: FormState = 'idle';\n\n  /** Error to display. */\n  @State() error: ResponseError | null;\n\n  /** The currenly selected processor */\n  @State() processor: ProcessorName = 'stripe';\n\n  /** The processor method. */\n  @State() method: string;\n\n  /** Is the processor manual? */\n  @State() isManualProcessor: boolean;\n\n  /** Holds the payment intents for the checkout. */\n  @State() paymentIntents: PaymentIntents = {};\n\n  /** Is this form a duplicate form? (There's another on the page) */\n  @State() isDuplicate: boolean;\n\n  /** Checkout has been updated. */\n  @Event() scOrderUpdated: EventEmitter<Checkout>;\n\n  /** Checkout has been finalized. */\n  @Event() scOrderFinalized: EventEmitter<Checkout>;\n\n  /** Checkout has an error. */\n  @Event() scOrderError: EventEmitter<ResponseError>;\n\n  @Listen('scUpdateOrderState')\n  handleOrderStateUpdate(e: { detail: Checkout }) {\n    checkoutState.checkout = e.detail;\n  }\n\n  @Listen('scSetMethod')\n  handleMethodChange(e) {\n    this.method = e.detail;\n  }\n\n  @Listen('scAddEntities')\n  handleAddEntities(e) {\n    const { products, prices } = e.detail;\n    // add products.\n    if (Object.keys(products?.length || {})) {\n      this.productsEntities = {\n        ...this.productsEntities,\n        ...products,\n      };\n    }\n\n    // add prices.\n    if (Object.keys(prices?.length || {})) {\n      this.pricesEntities = {\n        ...this.pricesEntities,\n        ...prices,\n      };\n    }\n  }\n\n  /**\n   * Submit the form\n   */\n  @Method()\n  async submit({ skip_validation } = { skip_validation: false }) {\n    if (!skip_validation) {\n      await this.validate();\n    }\n    return await this.sessionProvider.finalize();\n  }\n\n  /**\n   * Validate the form.\n   */\n  @Method()\n  async validate() {\n    const form = this.el.querySelector('sc-form') as HTMLScFormElement;\n    return await form.validate();\n  }\n\n  componentWillLoad() {\n    const checkout = document.querySelector('sc-checkout');\n    this.isDuplicate = !!checkout && checkout !== this.el;\n    if (this.isDuplicate) return;\n    Universe.create(this as Creator, this.state());\n  }\n\n  state() {\n    return {\n      processor: this.processor,\n      method: this.method,\n      selectedProcessorId: this.processor,\n      manualPaymentMethods: this.manualPaymentMethods,\n      processor_data: checkoutState.checkout?.processor_data,\n      state: this.checkoutState,\n      formState: formState.formState.value,\n      paymentIntents: this.paymentIntents,\n      successUrl: this.successUrl,\n      bumps: checkoutState.checkout?.recommended_bumps?.data as Bump[],\n\n      order: checkoutState.checkout,\n      abandonedCheckoutEnabled: checkoutState.checkout?.abandoned_checkout_enabled,\n      checkout: checkoutState.checkout,\n      shippingEnabled: checkoutState.checkout?.shipping_enabled,\n      lineItems: checkoutState.checkout?.line_items?.data || [],\n      editLineItems: this.editLineItems,\n      removeLineItems: this.removeLineItems,\n\n      // checkout states\n      loading: formState.formState.value === 'loading',\n      busy: ['updating', 'finalizing', 'paying', 'confirming'].includes(formState.formState.value),\n      paying: ['finalizing', 'paying', 'confirming'].includes(formState.formState.value),\n      empty: !['loading', 'updating'].includes(formState.formState.value) && !checkoutState.checkout?.line_items?.pagination?.count,\n      // checkout states\n\n      // stripe.\n      stripePaymentElement: processorsState.config.stripe.paymentElement,\n      stripePaymentIntent: (checkoutState.checkout?.staged_payment_intents?.data || []).find(intent => intent.processor_type === 'stripe'),\n\n      error: this.error,\n      customer: this.customer,\n      tax_status: checkoutState.checkout?.tax_status,\n      taxEnabled: checkoutState.checkout?.tax_enabled,\n      customerShippingAddress: typeof checkoutState.checkout?.customer !== 'string' ? checkoutState.checkout?.customer?.shipping_address : {},\n      shippingAddress: checkoutState.checkout?.shipping_address,\n      taxStatus: checkoutState.checkout?.tax_status,\n      taxIdentifier: checkoutState.checkout?.tax_identifier,\n      totalAmount: checkoutState.checkout?.total_amount,\n      taxProtocol: this.taxProtocol,\n      lockedChoices: this.prices,\n      products: this.productsEntities,\n      prices: this.pricesEntities,\n      country: 'US',\n      loggedIn: userState.loggedIn,\n      emailExists: checkoutState.checkout?.email_exists,\n      formId: checkoutState.formId,\n      mode: checkoutState.mode,\n      currencyCode: checkoutState.currencyCode,\n    };\n  }\n\n  render() {\n    if (this.isDuplicate) {\n      return <sc-alert open>{__('Due to processor restrictions, only one checkout form is allowed on the page.', 'surecart')}</sc-alert>;\n    }\n\n    return (\n      <div\n        class={{\n          'sc-checkout-container': true,\n          'sc-align-center': this.alignment === 'center',\n          'sc-align-wide': this.alignment === 'wide',\n          'sc-align-full': this.alignment === 'full',\n        }}\n      >\n        {/* Handles unsaved changes warning depending on checkout state */}\n        <sc-checkout-unsaved-changes-warning state={this.checkoutState} />\n        {checkoutState.validateStock && <sc-checkout-stock-alert />}\n\n        {/* Univers provider */}\n        <Universe.Provider state={this.state()}>\n          {/** Handles login form prompts. */}\n          <sc-login-provider\n            loggedIn={userState.loggedIn}\n            onScSetCustomer={e => (this.customer = e.detail as Customer)}\n            onScSetLoggedIn={e => (userState.loggedIn = e.detail)}\n            order={checkoutState.checkout}\n          >\n            {/* Handles the current checkout form state. */}\n            <sc-form-state-provider onScSetCheckoutFormState={e => (this.checkoutState = e.detail)}>\n              {/* Handles adding error component in the form. */}\n              <sc-form-error-provider>\n                {/* Validate components in the form based on order state. */}\n                <sc-form-components-validator disabled={this.disableComponentsValidation} taxProtocol={checkoutState.taxProtocol}>\n                  {/* Handle confirming of order after it is \"Paid\" by processors. */}\n                  <sc-order-confirm-provider checkout-status={formState.formState.value} success-url={this.successUrl}>\n                    {/* Handles the current session. */}\n                    <sc-session-provider ref={el => (this.sessionProvider = el as HTMLScSessionProviderElement)} prices={this.prices} persist={this.persistSession}>\n                      <slot />\n                    </sc-session-provider>\n                  </sc-order-confirm-provider>\n                </sc-form-components-validator>\n              </sc-form-error-provider>\n            </sc-form-state-provider>\n          </sc-login-provider>\n\n          {this.state().busy && <sc-block-ui class=\"busy-block-ui\" style={{ 'z-index': '30' }}></sc-block-ui>}\n\n          {['finalizing', 'paying', 'confirming', 'confirmed', 'redirecting'].includes(formState.formState.value) && (\n            <sc-block-ui spinner style={{ '--sc-block-ui-opacity': '0.75', 'z-index': '30' }}>\n              {formState.text.loading[formState.formState.value] || __('Processing payment...', 'surecart')}\n            </sc-block-ui>\n          )}\n\n          {['locked'].includes(formState.formState.value) && (\n            <sc-block-ui style={{ '--sc-block-ui-opacity': '1', 'z-index': '30', '--sc-block-ui-position': 'fixed', '--sc-block-ui-cursor': 'normal' }}>\n              <div style={{ 'text-align': 'center', 'padding': '2rem', 'max-width': '600px' }}>\n                {__('This invoice is not currently available for payment. If you have any questions, please contact us.', 'surecart')}\n              </div>\n            </sc-block-ui>\n          )}\n\n          <sc-checkout-test-complete checkout-status={formState.formState.value} success-url={this.successUrl} />\n        </Universe.Provider>\n      </div>\n    );\n  }\n}\n"]}