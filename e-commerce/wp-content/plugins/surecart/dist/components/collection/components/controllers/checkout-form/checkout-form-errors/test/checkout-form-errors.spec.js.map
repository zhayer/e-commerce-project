{"version":3,"file":"checkout-form-errors.spec.js","sourceRoot":"","sources":["../../../../../../src/components/controllers/checkout-form/checkout-form-errors/test/checkout-form-errors.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,iBAAiB,EAAE,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AAExD,QAAQ,CAAC,sBAAsB,EAAE,GAAG,EAAE;IACpC,EAAE,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;QACpC,qDAAqD;QACrD,iBAAiB,CACf;YACE,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,aAAa;YACtB,iBAAiB,EAAE;gBACjB;oBACE,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,oBAAoB;iBAC9B;gBACD;oBACE,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,oBAAoB;iBAC9B;aACF;SACF,EACD;YACE,WAAW,EAAE,IAAI;SAClB,CACF,CAAC;QAEF,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC;YAC7B,UAAU,EAAE,CAAC,oBAAoB,CAAC;YAClC,IAAI,EAAE,qDAAqD;SAC5D,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;QAEpD,oCAAoC;QACpC,eAAe,CAAC,OAAO,CAAC,CAAC;QACzB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,0BAA0B,CAAC,CAAC;QAE9D,sBAAsB;QACtB,eAAe,CAAC,SAAS,CAAC,CAAC;QAC3B,iBAAiB,CACf;YACE,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,aAAa;YACtB,iBAAiB,EAAE;gBACjB;oBACE,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,oBAAoB;iBAC9B;gBACD;oBACE,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,oBAAoB;iBAC9B;aACF;SACF,EACD;YACE,WAAW,EAAE,IAAI;SAClB,CACF,CAAC;QAEF,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,iCAAiC,CAAC,CAAC;QAErE,eAAe,CAAC,UAAU,CAAC,CAAC;QAC5B,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,4BAA4B,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { ScCheckoutFormErrors } from '../sc-checkout-form-errors';\nimport { createErrorNotice } from '@store/notices/mutations';\nimport { updateFormState } from '@store/form/mutations';\n\ndescribe('ScCheckoutFormErrors', () => {\n  it('should render errors', async () => {\n    // Create a mock error notice with additional errors.\n    createErrorNotice(\n      {\n        code: 'test',\n        message: 'Error title',\n        additional_errors: [\n          {\n            code: 'test2',\n            message: 'Additional error 1',\n          },\n          {\n            code: 'test3',\n            message: 'Additional error 2',\n          },\n        ],\n      },\n      {\n        dismissible: true,\n      },\n    );\n\n    const page = await newSpecPage({\n      components: [ScCheckoutFormErrors],\n      html: `<sc-checkout-form-errors></sc-checkout-form-errors>`,\n    });\n\n    expect(page.root).toMatchSnapshot('initial errors');\n\n    // make sure it removes if fetching.\n    updateFormState('FETCH');\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot('cleared due to fetching.');\n\n    // Resolve the update.\n    updateFormState('RESOLVE');\n    createErrorNotice(\n      {\n        code: 'test',\n        message: 'Error title',\n        additional_errors: [\n          {\n            code: 'test2',\n            message: 'Additional error 1',\n          },\n          {\n            code: 'test3',\n            message: 'Additional error 2',\n          },\n        ],\n      },\n      {\n        dismissible: true,\n      },\n    );\n\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot('re-added errors after clearing.');\n\n    updateFormState('FINALIZE');\n    await page.waitForChanges();\n    expect(page.root).toMatchSnapshot('cleared due to finalizing.');\n  });\n});\n"]}