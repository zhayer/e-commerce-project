{"version":3,"file":"sc-checkbox.js","sourceRoot":"","sources":["../../../../src/components/ui/checkbox/sc-checkbox.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, State, h, Event, EventEmitter, Method, Watch, Element } from '@stencil/core';\nimport { FormSubmitController } from '../../../functions/form-data';\nimport { isRtl } from '../../../functions/page-align';\n\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part control - The control wrapper.\n * @part checked-icon - Checked icon.\n * @part indeterminate-icon - Indeterminate icon.\n * @part label - The label.\n */\n@Component({\n  tag: 'sc-checkbox',\n  styleUrl: 'sc-checkbox.scss',\n  shadow: true,\n})\nexport class ScCheckbox {\n  @Element() el: HTMLScCheckboxElement;\n  private input: HTMLInputElement;\n  private formController: any;\n  private inputId = `checkbox-${++id}`;\n  private labelId = `checkbox-label-${id}`;\n\n  @State() private hasFocus: boolean = false;\n\n  /** The checkbox's name attribute. */\n  @Prop() name: string;\n\n  /** The checkbox's value attribute. */\n  @Prop() value: string;\n\n  /** Disables the checkbox. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes this edit and not editable. */\n  @Prop({ reflect: true }) edit: boolean = false;\n\n  /** Makes the checkbox a required field. */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** Draws the checkbox in a checked state. */\n  @Prop({ reflect: true, mutable: true }) checked: boolean = false;\n\n  /** Draws the checkbox in an indeterminate state. */\n  @Prop({ reflect: true, mutable: true }) indeterminate: boolean = false;\n\n  /** This will be true when the control is in an invalid state. Validity is determined by the `required` prop. */\n  @Prop({ reflect: true, mutable: true }) invalid: boolean = false;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event() scChange: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  firstUpdated() {\n    this.input.indeterminate = this.indeterminate;\n  }\n\n  /** Simulates a click on the checkbox. */\n  @Method()\n  async triggerClick() {\n    return this.input.click();\n  }\n\n  /** Sets focus on the checkbox. */\n  @Method()\n  async triggerFocus(options?: FocusOptions) {\n    return this.input.focus(options);\n  }\n\n  /** Removes focus from the checkbox. */\n  @Method()\n  async triggerBlur() {\n    return this.input.blur();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    this.invalid = !this.input.checkValidity();\n    return this.input.reportValidity();\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  handleClick() {\n    this.checked = !this.checked;\n    this.indeterminate = false;\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  handleLabelMouseDown() {\n    // Prevent clicks on the label from briefly blurring the input\n    // event.preventDefault();\n    this.input.focus();\n  }\n\n  @Watch('checked')\n  @Watch('indeterminate')\n  handleStateChange() {\n    this.input.checked = this.checked;\n    this.input.indeterminate = this.indeterminate;\n    this.scChange.emit();\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el, {\n      value: (control: HTMLScChoiceElement) => (control.checked ? control.value : undefined),\n    }).addFormData();\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n  }\n\n  render() {\n    const Tag = this.edit ? 'div' : 'label';\n    return (\n      <Tag\n        part=\"base\"\n        class={{\n          'checkbox': true,\n          'checkbox--is-required': this.required,\n          'checkbox--checked': this.checked,\n          'checkbox--disabled': this.disabled,\n          'checkbox--focused': this.hasFocus,\n          'checkbox--indeterminate': this.indeterminate,\n          'checkbox--is-rtl':isRtl()\n        }}\n        htmlFor={this.inputId}\n        onMouseDown={() => this.handleLabelMouseDown()}\n      >\n        <span part=\"control\" class=\"checkbox__control\">\n          {this.checked ? (\n            <span part=\"checked-icon\" class=\"checkbox__icon\">\n              <svg viewBox=\"0 0 16 16\">\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                  <g stroke=\"currentColor\" stroke-width=\"2\">\n                    <g transform=\"translate(3.428571, 3.428571)\">\n                      <path d=\"M0,5.71428571 L3.42857143,9.14285714\"></path>\n                      <path d=\"M9.14285714,0 L3.42857143,9.14285714\"></path>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n            </span>\n          ) : (\n            ''\n          )}\n          {!this.checked && this.indeterminate ? (\n            <span part=\"indeterminate-icon\" class=\"checkbox__icon\">\n              <svg viewBox=\"0 0 16 16\">\n                <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" stroke-linecap=\"round\">\n                  <g stroke=\"currentColor\" stroke-width=\"2\">\n                    <g transform=\"translate(2.285714, 6.857143)\">\n                      <path d=\"M10.2857143,1.14285714 L1.14285714,1.14285714\"></path>\n                    </g>\n                  </g>\n                </g>\n              </svg>\n            </span>\n          ) : (\n            ''\n          )}\n          <input\n            id={this.inputId}\n            ref={el => (this.input = el as HTMLInputElement)}\n            type=\"checkbox\"\n            name={this.name}\n            value={this.value}\n            checked={this.checked}\n            disabled={this.disabled}\n            required={this.required}\n            role=\"checkbox\"\n            aria-checked={this.checked ? 'true' : 'false'}\n            aria-labelledby={this.labelId}\n            onClick={() => this.handleClick()}\n            onBlur={() => this.handleBlur()}\n            onFocus={() => this.handleFocus()}\n          />\n        </span>\n        <span part=\"label\" id={this.labelId} class=\"checkbox__label\">\n          <slot></slot>\n        </span>\n      </Tag>\n    );\n  }\n}\n"]}