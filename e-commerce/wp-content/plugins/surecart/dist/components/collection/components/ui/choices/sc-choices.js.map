{"version":3,"file":"sc-choices.js","sourceRoot":"","sources":["../../../../src/components/ui/choices/sc-choices.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAElF,IAAI,EAAE,GAAG,CAAC,CAAC;AAEX;;;;;;GAMG;AAMH,MAAM,OAAO,SAAS;;QAGZ,YAAO,GAAW,WAAW,EAAE,EAAE,EAAE,CAAC;QACpC,WAAM,GAAG,qBAAqB,EAAE,EAAE,CAAC;QACnC,YAAO,GAAG,iBAAiB,EAAE,EAAE,CAAC;qBAGxB,EAAE;oBAG4C,QAAQ;;wBAK1C,KAAK;yBAGJ,IAAI;oBAGV,EAAE;yBAG+B,KAAK;uBAGnC,CAAC;4BAGI,EAAE;;;IAKjC,KAAK,CAAC,YAAY;QAChB,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;IAClB,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAGD,oBAAoB;QAClB,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,gCAAgC,CAAC,CAA8D,CAAC;QAC7I,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;YACnB,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACvB,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAClC,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED,YAAY;QACV,2CAA2C;QAC3C,IAAI,gBAAgB,IAAI,MAAM,EAAE,CAAC;YAC/B,IAAI,EAAE,GAAG,IAAI,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;gBAC3C,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;oBACtB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC;gBACvC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,CACL,iEACE,IAAI,EAAC,MAAM,EACX,KAAK,EAAE;gBACL,SAAS,EAAE,IAAI;gBACf,qBAAqB,EAAE,IAAI,CAAC,SAAS;gBACrC,qBAAqB,EAAE,IAAI,CAAC,SAAS;gBACrC,eAAe,EAAE,IAAI,CAAC,KAAK,GAAG,GAAG;gBACjC,eAAe,EAAE,IAAI,CAAC,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,GAAG;gBACtD,eAAe,EAAE,IAAI,CAAC,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,GAAG,GAAG;gBACtD,eAAe,EAAE,IAAI,CAAC,KAAK,IAAI,GAAG;aACnC,EACD,IAAI,EAAC,YAAY;YAEjB,wEACE,WAAW,EAAC,gCAAgC,EAC5C,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,OAAO,EAAE,IAAI,CAAC,OAAO,EACrB,MAAM,EAAE,IAAI,CAAC,MAAM,EACnB,OAAO,EAAE,IAAI,CAAC,OAAO;gBAErB,4DAAK,IAAI,EAAC,SAAS,EAAC,KAAK,EAAC,gBAAgB;oBACxC,8DAAQ,CACJ,CACU,CACT,CACZ,CAAC;IACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, Prop, h, State, Element, Watch, Method } from '@stencil/core';\n\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part choices - The choices wrapper.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n */\n@Component({\n  tag: 'sc-choices',\n  styleUrl: 'sc-choices.scss',\n  shadow: true,\n})\nexport class ScChoices {\n  @Element() el: HTMLScChoicesElement;\n\n  private inputId: string = `choices-${++id}`;\n  private helpId = `choices-help-text-${id}`;\n  private labelId = `choices-label-${id}`;\n\n  /** The group label. Required for proper accessibility. Alternatively, you can use the label slot. */\n  @Prop() label = '';\n\n  /** Input size */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  @Prop() autoWidth: boolean;\n\n  /** Required */\n  @Prop() required: boolean = false;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** Hides the fieldset and legend that surrounds the group. The label will still be read by screen readers. */\n  @Prop({ attribute: 'hide-label' }) hideLabel: boolean = false;\n\n  /** Number of columns on desktop */\n  @Prop() columns: number = 1;\n\n  /** Validation error message. */\n  @Prop() errorMessage: string = '';\n\n  @State() width: number;\n\n  @Method()\n  async triggerFocus() {\n    this.el.focus();\n  }\n\n  componentDidLoad() {\n    this.handleRequiredChange();\n    this.handleResize();\n  }\n\n  @Watch('required')\n  handleRequiredChange() {\n    const choices = [...this.el.querySelectorAll('sc-choice, sc-choice-container')] as Array<HTMLScChoiceElement | HTMLScChoiceContainerElement>;\n    if (choices.length) {\n      choices.forEach(choice => {\n        choice.required = this.required;\n      });\n    }\n  }\n\n  handleResize() {\n    // Only run if ResizeObserver is supported.\n    if ('ResizeObserver' in window) {\n      var ro = new window.ResizeObserver(entries => {\n        entries.forEach(entry => {\n          this.width = entry.contentRect.width;\n        });\n      });\n      ro.observe(this.el);\n    }\n  }\n\n  render() {\n    return (\n      <fieldset\n        part=\"base\"\n        class={{\n          'choices': true,\n          'choices--hide-label': this.hideLabel,\n          'choices--auto-width': this.autoWidth,\n          'breakpoint-sm': this.width < 384,\n          'breakpoint-md': this.width >= 384 && this.width < 576,\n          'breakpoint-lg': this.width >= 576 && this.width < 768,\n          'breakpoint-xl': this.width >= 768,\n        }}\n        role=\"radiogroup\"\n      >\n        <sc-form-control\n          exportparts=\"label, help-text, form-control\"\n          size={this.size}\n          required={this.required}\n          label={this.label}\n          showLabel={this.showLabel}\n          help={this.help}\n          inputId={this.inputId}\n          helpId={this.helpId}\n          labelId={this.labelId}\n        >\n          <div part=\"choices\" class=\"choices__items\">\n            <slot />\n          </div>\n        </sc-form-control>\n      </fieldset>\n    );\n  }\n}\n"]}