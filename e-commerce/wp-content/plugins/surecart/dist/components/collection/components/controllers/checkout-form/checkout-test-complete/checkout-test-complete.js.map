{"version":3,"file":"checkout-test-complete.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/checkout-test-complete/checkout-test-complete.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Host, Watch, Prop, State } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { state as processorsState } from '@store/processors';\nimport { state as selectedProcessorState } from '@store/selected-processor';\nimport { Checkout, ManualPaymentMethod } from '../../../../types';\nimport { clearCheckout } from '@store/checkout/mutations';\n/**\n * This component listens to the order status\n * and confirms the order when payment is successful.\n */\n@Component({\n  tag: 'sc-checkout-test-complete',\n  styleUrl: 'checkout-test-complete.scss',\n  shadow: true,\n})\nexport class ScCheckoutTestComplete {\n  private continueButton: HTMLScButtonElement;\n  /** The order confirm provider element */\n  @Element() el: HTMLScCheckoutTestCompleteElement;\n\n  /** Whether to show success modal */\n  @State() showSuccessModal: boolean = false;\n\n  /** Whether to show success modal */\n  @State() manualPaymentMethod: ManualPaymentMethod;\n\n  /** Checkout status to listen and do payment related stuff. */\n  @Prop() checkoutStatus: string;\n\n  /** Success url. */\n  @Prop() successUrl: string;\n\n  /** The order is paid event. */\n  @Event() scOrderPaid: EventEmitter<Checkout>;\n\n  @Event() scSetState: EventEmitter<string>;\n\n  /**\n   * Watch for paid checkout machine state.\n   * This is triggered by Stripe, Paypal or Paystack when payment succeeds.\n   */\n  @Watch('checkoutStatus')\n  handleConfirmOrderEvent() {\n    if (this.checkoutStatus === 'test_mode_restricted') {\n      this.confirmOrder();\n    }\n  }\n\n  /** Confirm the order. */\n  async confirmOrder() {\n    this.manualPaymentMethod = (processorsState.manualPaymentMethods || [])?.find(p => p.id === selectedProcessorState.id);\n    this.showSuccessModal = true;\n    clearCheckout();\n  }\n\n  @Watch('showSuccessModal')\n  handleSuccessModal() {\n    if (this.showSuccessModal) {\n      setTimeout(() => {\n        this.continueButton?.focus();\n      }, 50);\n    }\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot />\n        <sc-dialog\n          open={!!this.showSuccessModal}\n          style={{ '--body-spacing': 'var(--sc-spacing-xxx-large)', '--width': '400px' }}\n          noHeader\n          onScRequestClose={e => e.preventDefault()}\n        >\n          <div class=\"confirm__icon\">\n            <div class=\"confirm__icon-container\">\n              <sc-icon name=\"check\" />\n            </div>\n          </div>\n          <sc-dashboard-module\n            heading={__('Test checkout successful!', 'surecart')}\n            style={{ '--sc-dashboard-module-spacing': 'var(--sc-spacing-x-large)', 'textAlign': 'center' }}\n          >\n            <span slot=\"description\">\n              {__('This is a simulated test checkout, and no orders were processed. To perform a test order, please contact your store administrator. ', 'surecart')}\n            </span>\n            {!!this.manualPaymentMethod?.name && !!this.manualPaymentMethod?.instructions && (\n              <sc-alert type=\"info\" open style={{ 'text-align': 'left' }}>\n                <span slot=\"title\">{this.manualPaymentMethod?.name}</span>\n                <div innerHTML={this.manualPaymentMethod?.instructions}></div>\n              </sc-alert>\n            )}\n            <sc-button href={window?.scData?.home_url} size=\"large\" type=\"primary\" ref={el => (this.continueButton = el as HTMLScButtonElement)}>\n              {__('Go to Homepage', 'surecart')}\n              <sc-icon name=\"arrow-right\" slot=\"suffix\" />\n            </sc-button>\n          </sc-dashboard-module>\n        </sc-dialog>\n      </Host>\n    );\n  }\n}\n"]}