{"version":3,"file":"sc-order-summary.spec.js","sourceRoot":"","sources":["../../../../../../src/components/controllers/checkout-form/order-summary/test/sc-order-summary.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["import { newSpecPage } from '@stencil/core/testing';\nimport { ScOrderSummary } from '../sc-order-summary';\nimport { h } from '@stencil/core';\nimport { state as checkoutStore, dispose } from '@store/checkout';\n\n\nfunction mockBodyRects(width = 1000, height = 10000) {\n  const bodyRect = { x: 0, y: 0, width, height, top: 0, right: width, bottom: height, left: 0 };\n  document.body.getClientRects = jest.fn(() => {\n    return {\n      item: () => ({...bodyRect,toJSON:()=>bodyRect}),\n      length: 1,\n      [Symbol.iterator]: jest.fn(),\n    };\n  });\n}\ndescribe('sc-order-summary', () => {\n  beforeEach(() => {\n    mockBodyRects();\n    dispose();\n  });\n  it('renders', async () => {\n    const page = await newSpecPage({\n      components: [ScOrderSummary],\n      html: `<sc-order-summary></sc-order-summary>`,\n    });\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('renders scratch price if no trial has total savings amount', async () => {\n    checkoutStore.checkout = { amount_due: 1000, total_amount: 1000, total_savings_amount: -100 } as any;\n    const page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible collapsed></sc-order-summary>,\n    });\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('does not render scratch price amount_due is different than total_amount', async () => {\n    const page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary order={{ scratch_amount: 1000, total_amount: 2000, total_savings_amount: -100 } as any} collapsible collapsed></sc-order-summary>,\n    });\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should render when collapsible, collapsed on desktop and collapsed in mobile', async () => {\n    let page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible collapsedOnDesktop collapsedOnMobile ></sc-order-summary>,\n    });\n    expect(page.root).toMatchSnapshot();\n\n    mockBodyRects(500, 500);\n    page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible collapsedOnDesktop collapsedOnMobile ></sc-order-summary>,\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should render when collapsible, collapsed on desktop and not collapsed in mobile', async () => {\n    let page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible collapsedOnDesktop ></sc-order-summary>,\n    });\n    expect(page.root).toMatchSnapshot();\n\n    mockBodyRects(500, 500);\n    page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible collapsedOnDesktop ></sc-order-summary>,\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should render when collapsible, not collapsed on desktop and collapsed in mobile', async () => {\n    let page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible collapsedOnMobile ></sc-order-summary>,\n    });\n    expect(page.root).toMatchSnapshot();\n\n    mockBodyRects(500, 500);\n    page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible collapsedOnMobile ></sc-order-summary>,\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should render when collapsible, not collapsed on desktop and not collapsed in mobile', async () => {\n    let page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible></sc-order-summary>,\n    });\n    expect(page.root).toMatchSnapshot();\n\n    mockBodyRects(500, 500);\n    page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary collapsible></sc-order-summary>,\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n\n  it('should render when not collapsible', async () => {\n    let page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary></sc-order-summary>,\n    });\n    expect(page.root).toMatchSnapshot();\n\n    mockBodyRects(500, 500);\n    page = await newSpecPage({\n      components: [ScOrderSummary],\n      template: () => <sc-order-summary></sc-order-summary>,\n    });\n\n    expect(page.root).toMatchSnapshot();\n  });\n});\n"]}