{"version":3,"file":"sc-checkout-paystack-payment-provider.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/sc-checkout-paystack-payment-provider/sc-checkout-paystack-payment-provider.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * External dependencies.\n */\nimport PaystackPop from '@paystack/inline-js';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Component } from '@stencil/core';\n\n/**\n * Internal dependencies.\n */\nimport { state as checkoutState } from '@store/checkout';\nimport { state as selectedProcessor } from '@store/selected-processor';\nimport { onChange as onChangeFormState } from '@store/form';\nimport { currentFormState } from '@store/form/getters';\nimport { updateFormState } from '@store/form/mutations';\nimport { createErrorNotice } from '@store/notices/mutations';\n\n@Component({\n  tag: 'sc-checkout-paystack-payment-provider',\n  shadow: true,\n})\nexport class ScCheckoutPaystackPaymentProvider {\n  private unlistenToFormState: () => void;\n\n  componentWillLoad() {\n    // we need to listen to the form state and pay when the form state enters the paying state.\n    this.unlistenToFormState = onChangeFormState('formState', () => {\n      // are we paying?\n      if ('paying' === currentFormState()) {\n        this.confirm();\n      }\n    });\n  }\n\n  disconnectedCallback() {\n    this.unlistenToFormState();\n  }\n\n  async confirm() {\n    // this processor is not selected.\n    if (selectedProcessor?.id !== 'paystack') return;\n    // Must be a paystack session\n    if (!checkoutState?.checkout?.payment_intent?.processor_data.paystack) return;\n    // Prevent if already paid.\n    if (checkoutState?.checkout?.status === 'paid') return;\n\n    try {\n      // must have a public key and access code.\n      const { public_key, access_code } = checkoutState?.checkout?.payment_intent.processor_data.paystack;\n      if (!public_key || !access_code) {\n        createErrorNotice({ message: sprintf(__('Payment gateway configuration incomplete. Please ensure Paystack is properly configured for transactions.', 'surecart')) });\n        return;\n      }\n\n      const paystack = new PaystackPop();\n\n      await paystack.newTransaction({\n        key: public_key,\n        accessCode: access_code, // We'll use accessCode which will handle product, price on our server.\n        onSuccess: async transaction => {\n          if (transaction?.status !== 'success') {\n            throw { message: sprintf(__('Paystack transaction could not be finished. Status: %s', 'surecart'), transaction?.status) };\n          }\n          return updateFormState('PAID');\n        },\n        onClose: () => updateFormState('REJECT'),\n      });\n    } catch (err) {\n      createErrorNotice(err);\n      console.error(err);\n      updateFormState('REJECT');\n    }\n  }\n}\n"]}