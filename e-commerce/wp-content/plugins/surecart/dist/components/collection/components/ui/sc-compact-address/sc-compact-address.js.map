{"version":3,"file":"sc-compact-address.js","sourceRoot":"","sources":["../../../../src/components/ui/sc-compact-address/sc-compact-address.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { Address } from '../../../types';\nimport { countryChoices, hasState } from '../../../functions/address';\nimport { __ } from '@wordpress/i18n';\nimport { reportChildrenValidity } from '../../../functions/form-data';\n\n/**\n * @part base - The elements base wrapper.\n * @part input__base - The inputs base element.\n * @part select__base - The select boxes base element.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part trigger - The select box trigger.\n * @part panel - The select box panel.\n * @part caret - The select box caret.\n * @part search__base - The select search base.\n * @part search__input - The select search input.\n * @part search__form-control - The select search form control.\n * @part menu__base - The select menu base.\n * @part spinner__base  - The select spinner base.\n * @part empty - The select empty message.\n * @part block-ui - The block ui base component.\n * @part block-ui__content - The block ui content (spinner).\n */\n@Component({\n  tag: 'sc-compact-address',\n  styleUrl: 'sc-compact-address.scss',\n  shadow: true,\n})\nexport class ScCompactAddress {\n  @Element() el: HTMLScCompactAddressElement;\n\n  /** The address. */\n  @Prop({ mutable: true }) address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  @Prop() names: Partial<Address> = {\n    country: 'shipping_country',\n    city: 'shipping_city',\n    line_1: 'shipping_line_1',\n    line_2: 'shipping_line_2',\n    postal_code: 'shipping_postal_code',\n    state: 'shipping_state',\n  };\n\n  /**Placeholders */\n  @Prop() placeholders: Partial<Address> = {\n    country: '',\n    postal_code: '',\n    state: '',\n  };\n\n  /** Label for the address */\n  @Prop() label: string = __('Country or region', 'surecart');\n\n  /** Is this required? */\n  @Prop() required: boolean;\n\n  /** Is this loading */\n  @Prop() loading: boolean;\n\n  /** Address change event. */\n  @Event() scChangeAddress: EventEmitter<Partial<Address>>;\n\n  /** Address input event. */\n  @Event() scInputAddress: EventEmitter<Partial<Address>>;\n\n  /** Holds our country choices. */\n  @State() countryChoices: Array<{ value: string; label: string }> = countryChoices;\n\n  /** Holds the regions for a given country. */\n  @State() regions: Array<{ value: string; label: string }>;\n\n  @State() showState: boolean;\n  @State() showPostal: boolean;\n\n  /** When the state changes, we want to update city and postal fields. */\n  @Watch('address')\n  handleAddressChange() {\n    if (!this.address?.country) return;\n    this.setRegions();\n    this.showState = ['US', 'CA'].includes(this.address.country);\n    this.showPostal = ['US'].includes(this.address.country);\n    this.scChangeAddress.emit(this.address);\n    this.scInputAddress.emit(this.address);\n  }\n\n  updateAddress(address: Partial<Address>) {\n    this.address = { ...this.address, ...address };\n  }\n\n  handleAddressInput(address: Partial<Address>) {\n    this.scInputAddress.emit({ ...this.address, ...address });\n  }\n\n  clearAddress() {\n    this.address = {\n      name: this.address?.name,\n      country: null,\n      line_1: null,\n      line_2: null,\n      city: null,\n      postal_code: null,\n      state: null,\n    };\n  }\n\n  /** Set the regions based on the country. */\n  setRegions() {\n    if (hasState(this.address.country)) {\n      import('../address/countries.json').then(module => {\n        this.regions = module?.[this.address.country] as Array<{ value: string; label: string }>;\n      });\n    } else {\n      this.regions = [];\n    }\n  }\n\n  componentWillLoad() {\n    this.handleAddressChange();\n    const country = this.countryChoices.find(country => country.value === this.address.country)?.value;\n    if (country) {\n      this.updateAddress({ country });\n    }\n  }\n\n  @Method()\n  async reportValidity() {\n    return reportChildrenValidity(this.el);\n  }\n\n  getStatePlaceholder() {\n    if (this.placeholders?.state) return this.placeholders.state;\n\n    if (this.address?.country === 'US') return __('State', 'surecart');\n\n    return __('Province/Region', 'surecart');\n  }\n\n  render() {\n    return (\n      <div class=\"sc-address\" part=\"base\">\n        <sc-form-control exportparts=\"label, help-text, form-control\" label={this.label} class=\"sc-address__control\" part=\"control\" required={this.required}>\n          <sc-select\n            exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n            value={this.address?.country}\n            onScChange={(e: any) => {\n              this.clearAddress();\n              this.updateAddress({ country: e.target.value || null });\n            }}\n            choices={this.countryChoices}\n            autocomplete={'country-name'}\n            placeholder={this.placeholders?.country || __('Select Your Country', 'surecart')}\n            name={this.names.country}\n            search\n            unselect={false}\n            squared-bottom={this.showState || this.showPostal}\n            required={this.required}\n          />\n\n          <div class=\"sc-address__columns\">\n            {this.showState && (\n              <sc-select\n                exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n                placeholder={this.getStatePlaceholder()}\n                name={this.names.state}\n                autocomplete={'address-level1'}\n                value={this?.address?.state}\n                onScChange={(e: any) => this.updateAddress({ state: e.target.value || null })}\n                choices={this.regions}\n                required={this.required}\n                search\n                squared-top\n                unselect={false}\n                squared-right={this.showPostal}\n              />\n            )}\n            {this.showPostal && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders?.postal_code || __('Postal Code/Zip', 'surecart')}\n                name={this.names.postal_code}\n                onScChange={(e: any) => this.updateAddress({ postal_code: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ name: e.target.value || null })}\n                autocomplete={'postal-code'}\n                required={this.required}\n                value={this?.address?.postal_code}\n                squared-top\n                maxlength={5}\n                squared-left={this.showState}\n              />\n            )}\n          </div>\n        </sc-form-control>\n        {this.loading && <sc-block-ui exportparts=\"base:block-ui, content:block-ui__content\"></sc-block-ui>}\n      </div>\n    );\n  }\n}\n"]}