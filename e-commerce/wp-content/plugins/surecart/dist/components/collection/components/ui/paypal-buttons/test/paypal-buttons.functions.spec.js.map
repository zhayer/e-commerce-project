{"version":3,"file":"paypal-buttons.functions.spec.js","sourceRoot":"","sources":["../../../../../src/components/ui/paypal-buttons/test/paypal-buttons.functions.spec.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAEnD,QAAQ,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACxC,QAAQ,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACnC,EAAE,CAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,CACJ,mBAAmB,CAAC;gBAClB,QAAQ,EAAE,WAAW;gBACrB,QAAQ,EAAE,IAAI,EAAE,sBAAsB;gBACtC,UAAU,EAAE,aAAa;gBACzB,QAAQ,EAAE,KAAK;gBACf,iBAAiB,EAAE,KAAK,EAAE,MAAM;aACjC,CAAC,CACH,CAAC,OAAO,CAAC;gBACR,WAAW,EAAE,WAAW;gBACxB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,UAAU;gBACpB,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,KAAK;aAClB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,CACJ,mBAAmB,CAAC;gBAClB,QAAQ,EAAE,WAAW;gBACrB,QAAQ,EAAE,IAAI,EAAE,eAAe;gBAC/B,UAAU,EAAE,aAAa;gBACzB,QAAQ,EAAE,KAAK;gBACf,iBAAiB,EAAE,IAAI,EAAE,MAAM;aAChC,CAAC,CACH,CAAC,OAAO,CAAC;gBACR,WAAW,EAAE,WAAW;gBACxB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,UAAU;gBACpB,aAAa,EAAE,aAAa;gBAC5B,OAAO,EAAE,IAAI;gBACb,UAAU,EAAE,KAAK;aAClB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+EAA+E,EAAE,GAAG,EAAE;YACvF,WAAW;YACX,MAAM,CACJ,mBAAmB,CAAC;gBAClB,QAAQ,EAAE,WAAW;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,aAAa;gBACzB,QAAQ,EAAE,KAAK;gBACf,iBAAiB,EAAE,KAAK;aACzB,CAAC,CACH,CAAC,OAAO,CAAC;gBACR,WAAW,EAAE,WAAW;gBACxB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE,IAAI;gBACb,aAAa,EAAE,aAAa;gBAC5B,UAAU,EAAE,KAAK;aAClB,CAAC,CAAC;YAEH,UAAU;YACV,MAAM,CACJ,mBAAmB,CAAC;gBAClB,QAAQ,EAAE,WAAW;gBACrB,QAAQ,EAAE,KAAK;gBACf,UAAU,EAAE,aAAa;gBACzB,QAAQ,EAAE,KAAK;gBACf,iBAAiB,EAAE,IAAI;aACxB,CAAC,CACH,CAAC,OAAO,CAAC;gBACR,WAAW,EAAE,WAAW;gBACxB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE,IAAI;gBACb,aAAa,EAAE,aAAa;gBAC5B,UAAU,EAAE,KAAK;aAClB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { getScriptLoadParams } from '../functions';\n\ndescribe('Paypal Buttons Functions', () => {\n  describe('getScriptLoadParams', () => {\n    it('should not use merchant_id for CIB subscriptions', () => {\n      expect(\n        getScriptLoadParams({\n          clientId: 'client_id',\n          reusable: true, // it's a subscription\n          merchantId: 'merchant_id',\n          currency: 'eur',\n          merchantInitiated: false, // CIB\n        }),\n      ).toEqual({\n        'client-id': 'client_id',\n        'commit': false,\n        'intent': 'tokenize',\n        'vault': true,\n        'currency': 'EUR',\n      });\n    });\n\n    it('should use merchant_id for MIB subscriptions', () => {\n      expect(\n        getScriptLoadParams({\n          clientId: 'client_id',\n          reusable: true, // subscription\n          merchantId: 'merchant_id',\n          currency: 'eur',\n          merchantInitiated: true, // MIB\n        }),\n      ).toEqual({\n        'client-id': 'client_id',\n        'commit': false,\n        'intent': 'tokenize',\n        'merchant-id': 'merchant_id',\n        'vault': true,\n        'currency': 'EUR',\n      });\n    });\n\n    it('should use a merchant_id for a non-subscription order (regardless of CIB/MIB)', () => {\n      // MIB off.\n      expect(\n        getScriptLoadParams({\n          clientId: 'client_id',\n          reusable: false,\n          merchantId: 'merchant_id',\n          currency: 'eur',\n          merchantInitiated: false,\n        }),\n      ).toEqual({\n        'client-id': 'client_id',\n        'commit': false,\n        'intent': 'capture',\n        'vault': true,\n        'merchant-id': 'merchant_id',\n        'currency': 'EUR',\n      });\n\n      // MIB on.\n      expect(\n        getScriptLoadParams({\n          clientId: 'client_id',\n          reusable: false,\n          merchantId: 'merchant_id',\n          currency: 'eur',\n          merchantInitiated: true,\n        }),\n      ).toEqual({\n        'client-id': 'client_id',\n        'commit': false,\n        'intent': 'capture',\n        'vault': true,\n        'merchant-id': 'merchant_id',\n        'currency': 'EUR',\n      });\n    });\n  });\n});\n"]}