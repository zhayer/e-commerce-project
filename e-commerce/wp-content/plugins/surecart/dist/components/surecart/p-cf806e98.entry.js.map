{"version":3,"names":["scCcLogoCss","ScCcLogoStyle0","ScCcLogo","renderLogo","includes","this","brand","h","name","style","render","key","class","part","scTooltipCss","ScTooltipStyle0","ScTooltip","componentDidLoad","handleWindowScroll","open","tooltip","linkProps","getBoundingClientRect","tooltipProps","el","top","height","padding","min","Math","max","left","width","window","innerWidth","handleOpenChange","setTimeout","handleBlur","freeze","handleClick","handleFocus","handleMouseOver","handleMouseOut","text","type","onClick","onBlur","onFocus","onMouseOver","onMouseOut","ref"],"sources":["src/components/ui/cc-logo/sc-cc-logo.css?tag=sc-cc-logo&encapsulation=shadow","src/components/ui/cc-logo/sc-cc-logo.tsx","src/components/ui/tooltip/sc-tooltip.scss?tag=sc-tooltip&encapsulation=shadow","src/components/ui/tooltip/sc-tooltip.tsx"],"sourcesContent":[":host {\n  display: inline-block;\n}\n\n.cc-logo {\n  border-radius: var(--sc-cc-border-radius, 4px);\n  line-height: 0;\n  overflow:hidden;\n}\n","import { Component, h, Prop } from '@stencil/core';\n\n/**\n * @part base - The elements base wrapper.\n */\n\n@Component({\n  tag: 'sc-cc-logo',\n  styleUrl: 'sc-cc-logo.css',\n  shadow: true,\n})\nexport class ScCcLogo {\n  @Prop() brand: string;\n  renderLogo() {\n    if (['visa', 'mastercard', 'amex', 'discover', 'diners', 'jcb', 'unionpay'].includes(this.brand)) {\n      return <sc-icon name={this.brand} style={{ '--height': '0.63em' }}></sc-icon>;\n    }\n    return <sc-icon name=\"creditcard\" style={{ '--height': '0.63em' }}></sc-icon>;\n  }\n  render() {\n    return (\n      <div class=\"cc-logo\" part=\"base\">\n        {this.renderLogo()}\n      </div>\n    );\n  }\n}\n",".tooltip {\n  position: relative;\n\n\n  &--has-width .tooltip-text {\n    white-space: normal;\n    min-width: var(--sc-tooltip-width);\n    max-width: var(--sc-tooltip-width);\n  }\n}\n\n.tooltip-text {\n  position: fixed;\n  background: var(--sc-color-gray-900);\n  border-radius:var(--sc-border-radius-small);\n  padding: var(--sc-spacing-small);\n  font-family: var(--sc-input-font-family);\n  font-size: var(--sc-input-font-size-small);\n  white-space: nowrap;\n  line-height: 1.2;\n  color: var(--sc-color-white);\n  z-index: 99999;\n\n  &:after {\n    content: '';\n    position: absolute;\n    transform: translateX(-50%);\n    top: calc(100% - 1px);\n    left: 50%;\n    height: 0;\n    width: 0;\n    border: 7px solid transparent;\n    border-top-color: var(--sc-color-gray-900);\n  }\n}\n\n.tooltip--primary .tooltip-text {\n  background: var(--sc-color-primary-500);\n  &:after {\n    border-top-color: var(--sc-color-primary-500);\n  }\n}\n.tooltip--success .tooltip-text {\n  background: var(--sc-color-success-500);\n  &:after {\n    border-top-color: var(--sc-color-success-500);\n  }\n}\n.tooltip--info .tooltip-text {\n  background: var(--sc-color-info-500);\n  &:after {\n    border-top-color: var(--sc-color-info-500);\n  }\n}\n.tooltip--warning .tooltip-text {\n  background: var(--sc-color-warning-500);\n  &:after {\n    border-top-color: var(--sc-color-warning-500);\n  }\n}\n.tooltip--danger .tooltip-text {\n  background: var(--sc-color-danger-500);\n  &:after {\n    border-top-color: var(--sc-color-danger-500);\n  }\n}\n","import { Component, h, Prop, State, Element, Listen, Watch } from '@stencil/core';\n\n/**\n * @part base - The elements base wrapper.\n * @part text - The tooltip text.\n */\n@Component({\n  tag: 'sc-tooltip',\n  styleUrl: 'sc-tooltip.scss',\n  shadow: true,\n})\nexport class ScTooltip {\n  @Element() el: HTMLScTooltipElement;\n  private tooltip: HTMLDivElement;\n\n  /** Open or not */\n  @Prop({ mutable: true }) open: boolean;\n\n  /** Tooltip fixed width */\n  @Prop() width: string;\n\n  /** Tooltip text */\n  @Prop() text: string;\n\n  /** Freeze open or closed. */\n  @Prop() freeze: boolean;\n\n  /** The tooltip's padding. */\n  @Prop() padding: number = 5;\n\n  /** The tooltip's type. */\n  @Prop({ reflect: true }) type: 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text' = 'info';\n\n  @State() top: number = -10000;\n  @State() left: number = -10000;\n\n  componentDidLoad() {\n    this.handleWindowScroll();\n  }\n\n  @Listen('scroll', { target: 'window' })\n  @Listen('resize', { target: 'window' })\n  handleWindowScroll() {\n    if (!this.open) return;\n    if (!this.tooltip) return;\n\n    var linkProps = this.tooltip.getBoundingClientRect();\n    var tooltipProps = this.el.getBoundingClientRect();\n\n    this.top = tooltipProps.top - (linkProps.height + this.padding);\n    const min = Math.max(tooltipProps.left + tooltipProps.width / 2 - linkProps.width / 2 + this.padding, 0);\n    this.left = Math.min(min, window.innerWidth - linkProps.width);\n  }\n\n  @Watch('open')\n  handleOpenChange() {\n    setTimeout(() => this.handleWindowScroll(), 0);\n  }\n\n  handleBlur() {\n    if (this.freeze) return;\n    this.open = false;\n  }\n  handleClick() {\n    if (this.freeze) return;\n    this.open = true;\n  }\n  handleFocus() {\n    if (this.freeze) return;\n    this.open = true;\n  }\n  handleMouseOver() {\n    if (this.freeze) return;\n    this.open = true;\n  }\n  handleMouseOut() {\n    if (this.freeze) return;\n    this.open = false;\n  }\n\n  render() {\n    if (!this.text) {\n      return <slot />;\n    }\n\n    return (\n      <span\n        part=\"base\"\n        class={{\n          'tooltip': true,\n          // Types\n          'tooltip--primary': this.type === 'primary',\n          'tooltip--success': this.type === 'success',\n          'tooltip--info': this.type === 'info',\n          'tooltip--warning': this.type === 'warning',\n          'tooltip--danger': this.type === 'danger',\n          'tooltip--has-width': !!this.width,\n        }}\n        onClick={() => this.handleClick()}\n        onBlur={() => this.handleBlur()}\n        onFocus={() => this.handleFocus()}\n        onMouseOver={() => this.handleMouseOver()}\n        onMouseOut={() => this.handleMouseOut()}\n      >\n        <slot></slot>\n        {!!this.open && (\n          <div\n            part=\"text\"\n            ref={el => (this.tooltip = el as HTMLDivElement)}\n            class=\"tooltip-text\"\n            style={{\n              top: `${this.top}px`,\n              left: `${this.left}px`,\n              ...(this.width ? { '--sc-tooltip-width': this.width } : {}),\n            }}\n          >\n            {this.text}\n          </div>\n        )}\n      </span>\n    );\n  }\n}\n"],"mappings":"kDAAA,MAAMA,EAAc,mHACpB,MAAAC,EAAeD,E,MCUFE,EAAQ,M,8CAEnB,UAAAC,GACE,GAAI,CAAC,OAAQ,aAAc,OAAQ,WAAY,SAAU,MAAO,YAAYC,SAASC,KAAKC,OAAQ,CAChG,OAAOC,EAAA,WAASC,KAAMH,KAAKC,MAAOG,MAAO,CAAE,WAAY,W,CAEzD,OAAOF,EAAA,WAASC,KAAK,aAAaC,MAAO,CAAE,WAAY,W,CAEzD,MAAAC,GACE,OACEH,EAAA,OAAAI,IAAA,2CAAKC,MAAM,UAAUC,KAAK,QACvBR,KAAKF,a,aCtBd,MAAMW,EAAe,u3CACrB,MAAAC,EAAeD,E,MCUFE,EAAS,M,yHAiBM,E,UAGsE,O,UAExE,I,WACC,G,CAEzB,gBAAAC,GACEZ,KAAKa,oB,CAKP,kBAAAA,GACE,IAAKb,KAAKc,KAAM,OAChB,IAAKd,KAAKe,QAAS,OAEnB,IAAIC,EAAYhB,KAAKe,QAAQE,wBAC7B,IAAIC,EAAelB,KAAKmB,GAAGF,wBAE3BjB,KAAKoB,IAAMF,EAAaE,KAAOJ,EAAUK,OAASrB,KAAKsB,SACvD,MAAMC,EAAMC,KAAKC,IAAIP,EAAaQ,KAAOR,EAAaS,MAAQ,EAAIX,EAAUW,MAAQ,EAAI3B,KAAKsB,QAAS,GACtGtB,KAAK0B,KAAOF,KAAKD,IAAIA,EAAKK,OAAOC,WAAab,EAAUW,M,CAI1D,gBAAAG,GACEC,YAAW,IAAM/B,KAAKa,sBAAsB,E,CAG9C,UAAAmB,GACE,GAAIhC,KAAKiC,OAAQ,OACjBjC,KAAKc,KAAO,K,CAEd,WAAAoB,GACE,GAAIlC,KAAKiC,OAAQ,OACjBjC,KAAKc,KAAO,I,CAEd,WAAAqB,GACE,GAAInC,KAAKiC,OAAQ,OACjBjC,KAAKc,KAAO,I,CAEd,eAAAsB,GACE,GAAIpC,KAAKiC,OAAQ,OACjBjC,KAAKc,KAAO,I,CAEd,cAAAuB,GACE,GAAIrC,KAAKiC,OAAQ,OACjBjC,KAAKc,KAAO,K,CAGd,MAAAT,GACE,IAAKL,KAAKsC,KAAM,CACd,OAAOpC,EAAA,Y,CAGT,OACEA,EAAA,QACEM,KAAK,OACLD,MAAO,CACLQ,QAAW,KAEX,mBAAoBf,KAAKuC,OAAS,UAClC,mBAAoBvC,KAAKuC,OAAS,UAClC,gBAAiBvC,KAAKuC,OAAS,OAC/B,mBAAoBvC,KAAKuC,OAAS,UAClC,kBAAmBvC,KAAKuC,OAAS,SACjC,uBAAwBvC,KAAK2B,OAE/Ba,QAAS,IAAMxC,KAAKkC,cACpBO,OAAQ,IAAMzC,KAAKgC,aACnBU,QAAS,IAAM1C,KAAKmC,cACpBQ,YAAa,IAAM3C,KAAKoC,kBACxBQ,WAAY,IAAM5C,KAAKqC,kBAEvBnC,EAAA,eACGF,KAAKc,MACNZ,EAAA,OACEM,KAAK,OACLqC,IAAK1B,GAAOnB,KAAKe,QAAUI,EAC3BZ,MAAM,eACNH,MAAO,CACLgB,IAAK,GAAGpB,KAAKoB,QACbM,KAAM,GAAG1B,KAAK0B,YACV1B,KAAK2B,MAAQ,CAAE,qBAAsB3B,KAAK2B,OAAU,KAGzD3B,KAAKsC,M","ignoreList":[]}