{"file":"sc-customer-firstname.entry.cjs.js","mappings":"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","names":["getValueFromUrl","checkoutState","createOrUpdateCheckout","userState","onChange","h"],"sources":["src/components/controllers/checkout-form/customer-firstname/sc-customer-firstname.css?tag=sc-customer-firstname&encapsulation=shadow","src/components/controllers/checkout-form/customer-firstname/sc-customer-firstname.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Customer, Checkout } from '../../../../types';\nimport { Component, Prop, h, Event, EventEmitter, Method } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { getValueFromUrl } from '../../../../functions/util';\nimport { state as userState } from '@store/user';\nimport { state as checkoutState, onChange } from '@store/checkout';\nimport { createOrUpdateCheckout } from '../../../../services/session';\n\n@Component({\n  tag: 'sc-customer-firstname',\n  styleUrl: 'sc-customer-firstname.css',\n  shadow: true,\n})\nexport class ScCustomerFirstname {\n  private input: HTMLScInputElement;\n\n  private removeCheckoutListener: () => void;\n\n  /** Is the user logged in. */\n  @Prop() loggedIn: boolean;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = getValueFromUrl('first_name');\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n   */\n  @Prop({ mutable: true, reflect: true }) invalid = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  /** Emitted when the control's value changes. */\n  @Event({ composed: true }) scChange: EventEmitter<void>;\n\n  @Event() scUpdateOrderState: EventEmitter<Partial<Checkout>>;\n\n  /** Emitted when the clear button is activated. */\n  @Event() scClear: EventEmitter<void>;\n\n  /** Emitted when the control receives input. */\n  @Event() scInput: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  @Event() scUpdateCustomer: EventEmitter<{ email: string }>;\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  /** Silently update the checkout when the input changes. */\n  async handleChange() {\n    this.value = this.input.value;\n    try {\n      checkoutState.checkout = (await createOrUpdateCheckout({ id: checkoutState.checkout.id, data: { first_name: this.input.value } })) as Checkout;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /** Sync customer first name with session if it's updated by other means */\n  handleSessionChange() {\n    //return if we already have a value\n    if (this.value) return;\n\n    const fromUrl = getValueFromUrl('first_name');\n    if (!userState.loggedIn && !!fromUrl) {\n      this.value = fromUrl;\n      return;\n    }\n\n    if (!userState.loggedIn) {\n      this.value = (checkoutState?.checkout?.customer as Customer)?.first_name || checkoutState?.checkout?.first_name;\n    } else {\n      this.value = checkoutState?.checkout?.first_name || (checkoutState?.checkout?.customer as Customer)?.first_name;\n    }\n  }\n\n  /** Listen to checkout. */\n  componentWillLoad() {\n    this.handleSessionChange();\n    this.removeCheckoutListener = onChange('checkout', () => this.handleSessionChange());\n  }\n\n  /** Remove listener. */\n  disconnectedCallback() {\n    this.removeCheckoutListener();\n  }\n\n  render() {\n    return (\n      <sc-input\n        type=\"text\"\n        name=\"first_name\"\n        ref={el => (this.input = el as HTMLScInputElement)}\n        value={this.value}\n        label={this.label}\n        help={this.help}\n        autocomplete=\"first_name\"\n        placeholder={this.placeholder}\n        readonly={this.readonly}\n        required={this.required}\n        invalid={this.invalid}\n        autofocus={this.autofocus}\n        hasFocus={this.hasFocus}\n        onScChange={() => this.handleChange()}\n        onScInput={() => this.scInput.emit()}\n        onScFocus={() => this.scFocus.emit()}\n        onScBlur={() => this.scBlur.emit()}\n        {...(this.disabled && { disabled: true })}\n      ></sc-input>\n    );\n  }\n}\n"],"version":3}